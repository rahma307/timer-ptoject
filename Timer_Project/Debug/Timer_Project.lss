
Timer_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00003330  000033c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008000d0  008000d0  00003434  2**0
                  ALLOC
  3 .stab         000032ac  00000000  00000000  00003434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001150  00000000  00000000  000066e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_10>
      2c:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 15 	call	0x2a64	; 0x2a64 <main>
      8a:	0c 94 96 19 	jmp	0x332c	; 0x332c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ea       	ldi	r26, 0xAF	; 175
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ea       	ldi	r24, 0xAF	; 175
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include   "DIO_INT.h"
#include   "DIO_CONFIG.h"
 
 
 void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 DDRA_REGISTER = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8e ef       	ldi	r24, 0xFE	; 254
     b54:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	 DDRB_REGISTER = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	 DDRC_REGISTER = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	 DDRD_REGISTER = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

	 PORTA_REGISTER = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

	 PORTB_REGISTER = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     b76:	e8 e3       	ldi	r30, 0x38	; 56
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);

	 PORTC_REGISTER = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     b7c:	e5 e3       	ldi	r30, 0x35	; 53
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

	 PORTD_REGISTER = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     b82:	e2 e3       	ldi	r30, 0x32	; 50
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 ef       	ldi	r24, 0xF0	; 240
     b88:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <DIO_u8SetPinDirection>:
 
 u8  DIO_u8SetPinDirection(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Direction)
 {
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <DIO_u8SetPinDirection+0x6>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <DIO_u8SetPinDirection+0x8>
     b98:	00 d0       	rcall	.+0      	; 0xb9a <DIO_u8SetPinDirection+0xa>
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	6b 83       	std	Y+3, r22	; 0x03
     ba2:	4c 83       	std	Y+4, r20	; 0x04
	 u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	85 30       	cpi	r24, 0x05	; 5
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_u8SetPinDirection+0x20>
     bae:	ed c0       	rjmp	.+474    	; 0xd8a <DIO_u8SetPinDirection+0x1fa>
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <DIO_u8SetPinDirection+0x28>
     bb6:	e9 c0       	rjmp	.+466    	; 0xd8a <DIO_u8SetPinDirection+0x1fa>
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	88 23       	and	r24, r24
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <DIO_u8SetPinDirection+0x36>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <DIO_u8SetPinDirection+0x36>
     bc4:	e2 c0       	rjmp	.+452    	; 0xd8a <DIO_u8SetPinDirection+0x1fa>
	 switch(COPY_u8PortId ){
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	3e 83       	std	Y+6, r19	; 0x06
     bce:	2d 83       	std	Y+5, r18	; 0x05
     bd0:	8d 81       	ldd	r24, Y+5	; 0x05
     bd2:	9e 81       	ldd	r25, Y+6	; 0x06
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <DIO_u8SetPinDirection+0x4c>
     bda:	48 c0       	rjmp	.+144    	; 0xc6c <DIO_u8SetPinDirection+0xdc>
     bdc:	2d 81       	ldd	r18, Y+5	; 0x05
     bde:	3e 81       	ldd	r19, Y+6	; 0x06
     be0:	23 30       	cpi	r18, 0x03	; 3
     be2:	31 05       	cpc	r19, r1
     be4:	34 f4       	brge	.+12     	; 0xbf2 <DIO_u8SetPinDirection+0x62>
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	9e 81       	ldd	r25, Y+6	; 0x06
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	91 05       	cpc	r25, r1
     bee:	71 f0       	breq	.+28     	; 0xc0c <DIO_u8SetPinDirection+0x7c>
     bf0:	cd c0       	rjmp	.+410    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
     bf2:	2d 81       	ldd	r18, Y+5	; 0x05
     bf4:	3e 81       	ldd	r19, Y+6	; 0x06
     bf6:	23 30       	cpi	r18, 0x03	; 3
     bf8:	31 05       	cpc	r19, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <DIO_u8SetPinDirection+0x6e>
     bfc:	67 c0       	rjmp	.+206    	; 0xccc <DIO_u8SetPinDirection+0x13c>
     bfe:	8d 81       	ldd	r24, Y+5	; 0x05
     c00:	9e 81       	ldd	r25, Y+6	; 0x06
     c02:	84 30       	cpi	r24, 0x04	; 4
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <DIO_u8SetPinDirection+0x7a>
     c08:	91 c0       	rjmp	.+290    	; 0xd2c <DIO_u8SetPinDirection+0x19c>
     c0a:	c0 c0       	rjmp	.+384    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>

	case PORTA :
		if(COPY_u8Direction == INPUT){
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	88 23       	and	r24, r24
     c10:	a9 f4       	brne	.+42     	; 0xc3c <DIO_u8SetPinDirection+0xac>
			CLR_BIT(DDRA_REGISTER ,COPY_u8PinId );
     c12:	aa e3       	ldi	r26, 0x3A	; 58
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e3       	ldi	r30, 0x3A	; 58
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 2e       	mov	r0, r18
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_u8SetPinDirection+0xa0>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_u8SetPinDirection+0x9c>
     c34:	80 95       	com	r24
     c36:	84 23       	and	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	a8 c0       	rjmp	.+336    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
		}
		else if(COPY_u8Direction == OUTPUT){
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	09 f0       	breq	.+2      	; 0xc44 <DIO_u8SetPinDirection+0xb4>
     c42:	a4 c0       	rjmp	.+328    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
			SET_BIT(DDRA_REGISTER ,COPY_u8PinId );
     c44:	aa e3       	ldi	r26, 0x3A	; 58
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e3       	ldi	r30, 0x3A	; 58
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_u8SetPinDirection+0xd2>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_u8SetPinDirection+0xce>
     c66:	84 2b       	or	r24, r20
     c68:	8c 93       	st	X, r24
     c6a:	90 c0       	rjmp	.+288    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Direction == INPUT){
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	88 23       	and	r24, r24
     c70:	a9 f4       	brne	.+42     	; 0xc9c <DIO_u8SetPinDirection+0x10c>
				CLR_BIT(DDRB_REGISTER ,COPY_u8PinId);
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <DIO_u8SetPinDirection+0x100>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <DIO_u8SetPinDirection+0xfc>
     c94:	80 95       	com	r24
     c96:	84 23       	and	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	78 c0       	rjmp	.+240    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <DIO_u8SetPinDirection+0x114>
     ca2:	74 c0       	rjmp	.+232    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRB_REGISTER ,COPY_u8PinId );
     ca4:	a7 e3       	ldi	r26, 0x37	; 55
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e3       	ldi	r30, 0x37	; 55
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_u8SetPinDirection+0x132>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_u8SetPinDirection+0x12e>
     cc6:	84 2b       	or	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	60 c0       	rjmp	.+192    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Direction == INPUT){
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	88 23       	and	r24, r24
     cd0:	a9 f4       	brne	.+42     	; 0xcfc <DIO_u8SetPinDirection+0x16c>
				CLR_BIT(DDRC_REGISTER ,COPY_u8PinId);
     cd2:	a4 e3       	ldi	r26, 0x34	; 52
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e3       	ldi	r30, 0x34	; 52
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_u8SetPinDirection+0x160>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_u8SetPinDirection+0x15c>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	48 c0       	rjmp	.+144    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	09 f0       	breq	.+2      	; 0xd04 <DIO_u8SetPinDirection+0x174>
     d02:	44 c0       	rjmp	.+136    	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRC_REGISTER ,COPY_u8PinId );
     d04:	a4 e3       	ldi	r26, 0x34	; 52
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e4 e3       	ldi	r30, 0x34	; 52
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_u8SetPinDirection+0x192>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_u8SetPinDirection+0x18e>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	30 c0       	rjmp	.+96     	; 0xd8c <DIO_u8SetPinDirection+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Direction == INPUT){
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	88 23       	and	r24, r24
     d30:	a9 f4       	brne	.+42     	; 0xd5c <DIO_u8SetPinDirection+0x1cc>
				CLR_BIT(DDRD_REGISTER ,COPY_u8PinId );
     d32:	a1 e3       	ldi	r26, 0x31	; 49
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e1 e3       	ldi	r30, 0x31	; 49
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_u8SetPinDirection+0x1c0>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_u8SetPinDirection+0x1bc>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	18 c0       	rjmp	.+48     	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
			}
			else if(COPY_u8Direction == OUTPUT){
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	a9 f4       	brne	.+42     	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
				SET_BIT(DDRD_REGISTER ,COPY_u8PinId );
     d62:	a1 e3       	ldi	r26, 0x31	; 49
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e1 e3       	ldi	r30, 0x31	; 49
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_u8SetPinDirection+0x1f0>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_u8SetPinDirection+0x1ec>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <DIO_u8SetPinDirection+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
	 
 } 
     d8e:	26 96       	adiw	r28, 0x06	; 6
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <DIO_u8SetPinValue>:
 u8  DIO_u8SetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 COPY_u8Value){
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <DIO_u8SetPinValue+0x6>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <DIO_u8SetPinValue+0x8>
     da8:	00 d0       	rcall	.+0      	; 0xdaa <DIO_u8SetPinValue+0xa>
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	8a 83       	std	Y+2, r24	; 0x02
     db0:	6b 83       	std	Y+3, r22	; 0x03
     db2:	4c 83       	std	Y+4, r20	; 0x04
	  u8 Local_u8ErrorState = STD_TYPES_OK ;    // flage 
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	89 83       	std	Y+1, r24	; 0x01
	  
	if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 ) &&  ((COPY_u8Value == LOGIC_LOW) ||(COPY_u8Value == LOGIC_HIGH) ) ) {   //  ظˆط¯ظٹ   ط¹ظ…ط±ظ‡ط§ ظ…ط§ ظ‡طھط¬ظٹط¨ ط±ظ‚ظ…ط³ط§ظ„ط¨u8ظ…ط³طھط­ظٹظ„ ط±ظ‚ظ… ط§ظ„ط¨ظˆط±طھ ظٹط¨ظ‚ظٹ ط§ظ‚ظ„ ظ…ظ† طµظپط± ظ„ط§ظ† ط§ظ„ظ†ظˆط¹ ط¨طھط§ط¹ظ‡  
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	85 30       	cpi	r24, 0x05	; 5
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <DIO_u8SetPinValue+0x20>
     dbe:	ed c0       	rjmp	.+474    	; 0xf9a <DIO_u8SetPinValue+0x1fa>
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	88 30       	cpi	r24, 0x08	; 8
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <DIO_u8SetPinValue+0x28>
     dc6:	e9 c0       	rjmp	.+466    	; 0xf9a <DIO_u8SetPinValue+0x1fa>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	88 23       	and	r24, r24
     dcc:	21 f0       	breq	.+8      	; 0xdd6 <DIO_u8SetPinValue+0x36>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <DIO_u8SetPinValue+0x36>
     dd4:	e2 c0       	rjmp	.+452    	; 0xf9a <DIO_u8SetPinValue+0x1fa>
	 switch(COPY_u8PortId ){
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3e 83       	std	Y+6, r19	; 0x06
     dde:	2d 83       	std	Y+5, r18	; 0x05
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <DIO_u8SetPinValue+0x4c>
     dea:	48 c0       	rjmp	.+144    	; 0xe7c <DIO_u8SetPinValue+0xdc>
     dec:	2d 81       	ldd	r18, Y+5	; 0x05
     dee:	3e 81       	ldd	r19, Y+6	; 0x06
     df0:	23 30       	cpi	r18, 0x03	; 3
     df2:	31 05       	cpc	r19, r1
     df4:	34 f4       	brge	.+12     	; 0xe02 <DIO_u8SetPinValue+0x62>
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	91 05       	cpc	r25, r1
     dfe:	71 f0       	breq	.+28     	; 0xe1c <DIO_u8SetPinValue+0x7c>
     e00:	cd c0       	rjmp	.+410    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
     e02:	2d 81       	ldd	r18, Y+5	; 0x05
     e04:	3e 81       	ldd	r19, Y+6	; 0x06
     e06:	23 30       	cpi	r18, 0x03	; 3
     e08:	31 05       	cpc	r19, r1
     e0a:	09 f4       	brne	.+2      	; 0xe0e <DIO_u8SetPinValue+0x6e>
     e0c:	67 c0       	rjmp	.+206    	; 0xedc <DIO_u8SetPinValue+0x13c>
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <DIO_u8SetPinValue+0x7a>
     e18:	91 c0       	rjmp	.+290    	; 0xf3c <DIO_u8SetPinValue+0x19c>
     e1a:	c0 c0       	rjmp	.+384    	; 0xf9c <DIO_u8SetPinValue+0x1fc>

	case PORTA :
		if(COPY_u8Value == LOGIC_LOW){
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	88 23       	and	r24, r24
     e20:	a9 f4       	brne	.+42     	; 0xe4c <DIO_u8SetPinValue+0xac>
			CLR_BIT(PORTA_REGISTER ,COPY_u8PinId );
     e22:	ab e3       	ldi	r26, 0x3B	; 59
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	eb e3       	ldi	r30, 0x3B	; 59
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_u8SetPinValue+0xa0>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_u8SetPinValue+0x9c>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	a8 c0       	rjmp	.+336    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
		}
		else if(COPY_u8Value == LOGIC_HIGH){
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_u8SetPinValue+0xb4>
     e52:	a4 c0       	rjmp	.+328    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
			SET_BIT(PORTA_REGISTER ,COPY_u8PinId );
     e54:	ab e3       	ldi	r26, 0x3B	; 59
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	eb e3       	ldi	r30, 0x3B	; 59
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_u8SetPinValue+0xd2>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_u8SetPinValue+0xce>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	90 c0       	rjmp	.+288    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
		}
	 break ;

	case PORTB :
		if(COPY_u8Value == LOGIC_LOW){
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	88 23       	and	r24, r24
     e80:	a9 f4       	brne	.+42     	; 0xeac <DIO_u8SetPinValue+0x10c>
				CLR_BIT(PORTB_REGISTER ,COPY_u8PinId);
     e82:	a8 e3       	ldi	r26, 0x38	; 56
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e8 e3       	ldi	r30, 0x38	; 56
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_u8SetPinValue+0x100>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_u8SetPinValue+0xfc>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	78 c0       	rjmp	.+240    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <DIO_u8SetPinValue+0x114>
     eb2:	74 c0       	rjmp	.+232    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTB_REGISTER  ,COPY_u8PinId );
     eb4:	a8 e3       	ldi	r26, 0x38	; 56
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_u8SetPinValue+0x132>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_u8SetPinValue+0x12e>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	60 c0       	rjmp	.+192    	; 0xf9c <DIO_u8SetPinValue+0x1fc>

		 break ;

	case PORTC :

		if(COPY_u8Value == LOGIC_LOW){
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	88 23       	and	r24, r24
     ee0:	a9 f4       	brne	.+42     	; 0xf0c <DIO_u8SetPinValue+0x16c>
				CLR_BIT(PORTC_REGISTER  ,COPY_u8PinId);
     ee2:	a5 e3       	ldi	r26, 0x35	; 53
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e3       	ldi	r30, 0x35	; 53
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_u8SetPinValue+0x160>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_u8SetPinValue+0x15c>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	48 c0       	rjmp	.+144    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	09 f0       	breq	.+2      	; 0xf14 <DIO_u8SetPinValue+0x174>
     f12:	44 c0       	rjmp	.+136    	; 0xf9c <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTC_REGISTER  ,COPY_u8PinId );
     f14:	a5 e3       	ldi	r26, 0x35	; 53
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_u8SetPinValue+0x192>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_u8SetPinValue+0x18e>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	30 c0       	rjmp	.+96     	; 0xf9c <DIO_u8SetPinValue+0x1fc>

			break ;

	case PORTD :

		if(COPY_u8Value == LOGIC_LOW){
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	88 23       	and	r24, r24
     f40:	a9 f4       	brne	.+42     	; 0xf6c <DIO_u8SetPinValue+0x1cc>
				CLR_BIT(PORTD_REGISTER  ,COPY_u8PinId );
     f42:	a2 e3       	ldi	r26, 0x32	; 50
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e2 e3       	ldi	r30, 0x32	; 50
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_u8SetPinValue+0x1c0>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_u8SetPinValue+0x1bc>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	18 c0       	rjmp	.+48     	; 0xf9c <DIO_u8SetPinValue+0x1fc>
			}
			else if(COPY_u8Value == LOGIC_HIGH){
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	a9 f4       	brne	.+42     	; 0xf9c <DIO_u8SetPinValue+0x1fc>
				SET_BIT(PORTD_REGISTER  ,COPY_u8PinId );
     f72:	a2 e3       	ldi	r26, 0x32	; 50
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e2 e3       	ldi	r30, 0x32	; 50
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinValue+0x1f0>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinValue+0x1ec>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <DIO_u8SetPinValue+0x1fc>
	}}
	
	
	else{ 
		
		Local_u8ErrorState =STD_TYPES_NOK;
     f9a:	19 82       	std	Y+1, r1	; 0x01
	}

return   Local_u8ErrorState ;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
 }   
     f9e:	26 96       	adiw	r28, 0x06	; 6
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <DIO_u8GetPinValue>:
 
 u8  DIO_u8GetPinValue(u8 COPY_u8PortId , u8 COPY_u8PinId ,u8 *COPY_Pu8PinValue) {
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	28 97       	sbiw	r28, 0x08	; 8
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	8b 83       	std	Y+3, r24	; 0x03
     fc6:	6c 83       	std	Y+4, r22	; 0x04
     fc8:	5e 83       	std	Y+6, r21	; 0x06
     fca:	4d 83       	std	Y+5, r20	; 0x05
 u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8a 83       	std	Y+2, r24	; 0x02
 u8 Local_u8PinValue ;  // to ensure that the fuction get_BIT_value will return 0 or 1  if true we will store the value in pointer 
if( (COPY_u8PortId <= PORTD)   && ( COPY_u8PinId <=PIN_7 )  && (COPY_Pu8PinValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	85 30       	cpi	r24, 0x05	; 5
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <DIO_u8GetPinValue+0x28>
     fd6:	ad c0       	rjmp	.+346    	; 0x1132 <DIO_u8GetPinValue+0x182>
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <DIO_u8GetPinValue+0x30>
     fde:	a9 c0       	rjmp	.+338    	; 0x1132 <DIO_u8GetPinValue+0x182>
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	09 f4       	brne	.+2      	; 0xfea <DIO_u8GetPinValue+0x3a>
     fe8:	a4 c0       	rjmp	.+328    	; 0x1132 <DIO_u8GetPinValue+0x182>

	 switch(COPY_u8PortId ){
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	38 87       	std	Y+8, r19	; 0x08
     ff2:	2f 83       	std	Y+7, r18	; 0x07
     ff4:	4f 81       	ldd	r20, Y+7	; 0x07
     ff6:	58 85       	ldd	r21, Y+8	; 0x08
     ff8:	42 30       	cpi	r20, 0x02	; 2
     ffa:	51 05       	cpc	r21, r1
     ffc:	c9 f1       	breq	.+114    	; 0x1070 <DIO_u8GetPinValue+0xc0>
     ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    1000:	98 85       	ldd	r25, Y+8	; 0x08
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	34 f4       	brge	.+12     	; 0x1014 <DIO_u8GetPinValue+0x64>
    1008:	2f 81       	ldd	r18, Y+7	; 0x07
    100a:	38 85       	ldd	r19, Y+8	; 0x08
    100c:	21 30       	cpi	r18, 0x01	; 1
    100e:	31 05       	cpc	r19, r1
    1010:	71 f0       	breq	.+28     	; 0x102e <DIO_u8GetPinValue+0x7e>
    1012:	90 c0       	rjmp	.+288    	; 0x1134 <DIO_u8GetPinValue+0x184>
    1014:	4f 81       	ldd	r20, Y+7	; 0x07
    1016:	58 85       	ldd	r21, Y+8	; 0x08
    1018:	43 30       	cpi	r20, 0x03	; 3
    101a:	51 05       	cpc	r21, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_u8GetPinValue+0x70>
    101e:	49 c0       	rjmp	.+146    	; 0x10b2 <DIO_u8GetPinValue+0x102>
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	84 30       	cpi	r24, 0x04	; 4
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_u8GetPinValue+0x7c>
    102a:	63 c0       	rjmp	.+198    	; 0x10f2 <DIO_u8GetPinValue+0x142>
    102c:	83 c0       	rjmp	.+262    	; 0x1134 <DIO_u8GetPinValue+0x184>

	 	 	case PORTA :
	 	 		 Local_u8PinValue =  GET_BIT(PINA_REGISTER , COPY_u8PinId);
    102e:	e9 e3       	ldi	r30, 0x39	; 57
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_u8GetPinValue+0x96>
    1042:	55 95       	asr	r21
    1044:	47 95       	ror	r20
    1046:	8a 95       	dec	r24
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_u8GetPinValue+0x92>
    104a:	ca 01       	movw	r24, r20
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	88 23       	and	r24, r24
    1054:	21 f4       	brne	.+8      	; 0x105e <DIO_u8GetPinValue+0xae>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    1056:	ed 81       	ldd	r30, Y+5	; 0x05
    1058:	fe 81       	ldd	r31, Y+6	; 0x06
    105a:	10 82       	st	Z, r1
    105c:	6b c0       	rjmp	.+214    	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	09 f0       	breq	.+2      	; 0x1066 <DIO_u8GetPinValue+0xb6>
    1064:	67 c0       	rjmp	.+206    	; 0x1134 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1066:	ed 81       	ldd	r30, Y+5	; 0x05
    1068:	fe 81       	ldd	r31, Y+6	; 0x06
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 83       	st	Z, r24
    106e:	62 c0       	rjmp	.+196    	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
	 	 	 break ;

	 	 	case PORTB :
	 	 		  Local_u8PinValue =  GET_BIT(PINB_REGISTER , COPY_u8PinId);
    1070:	e6 e3       	ldi	r30, 0x36	; 54
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a9 01       	movw	r20, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_u8GetPinValue+0xd8>
    1084:	55 95       	asr	r21
    1086:	47 95       	ror	r20
    1088:	8a 95       	dec	r24
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_u8GetPinValue+0xd4>
    108c:	ca 01       	movw	r24, r20
    108e:	81 70       	andi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	88 23       	and	r24, r24
    1096:	21 f4       	brne	.+8      	; 0x10a0 <DIO_u8GetPinValue+0xf0>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    1098:	ed 81       	ldd	r30, Y+5	; 0x05
    109a:	fe 81       	ldd	r31, Y+6	; 0x06
    109c:	10 82       	st	Z, r1
    109e:	4a c0       	rjmp	.+148    	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <DIO_u8GetPinValue+0xf8>
    10a6:	46 c0       	rjmp	.+140    	; 0x1134 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    10a8:	ed 81       	ldd	r30, Y+5	; 0x05
    10aa:	fe 81       	ldd	r31, Y+6	; 0x06
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	80 83       	st	Z, r24
    10b0:	41 c0       	rjmp	.+130    	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
	 	 		 break ;

	 	 	case PORTC :
	 	 		  Local_u8PinValue =  GET_BIT(PINC_REGISTER , COPY_u8PinId);
    10b2:	e3 e3       	ldi	r30, 0x33	; 51
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8GetPinValue+0x11a>
    10c6:	55 95       	asr	r21
    10c8:	47 95       	ror	r20
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8GetPinValue+0x116>
    10ce:	ca 01       	movw	r24, r20
    10d0:	81 70       	andi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 23       	and	r24, r24
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <DIO_u8GetPinValue+0x132>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    10da:	ed 81       	ldd	r30, Y+5	; 0x05
    10dc:	fe 81       	ldd	r31, Y+6	; 0x06
    10de:	10 82       	st	Z, r1
    10e0:	29 c0       	rjmp	.+82     	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	31 f5       	brne	.+76     	; 0x1134 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    10e8:	ed 81       	ldd	r30, Y+5	; 0x05
    10ea:	fe 81       	ldd	r31, Y+6	; 0x06
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 83       	st	Z, r24
    10f0:	21 c0       	rjmp	.+66     	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
	 	 			break ;

	 	 	case PORTD :
	 	 		 Local_u8PinValue =  GET_BIT(PIND_REGISTER , COPY_u8PinId);
    10f2:	e0 e3       	ldi	r30, 0x30	; 48
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_u8GetPinValue+0x15a>
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_u8GetPinValue+0x156>
    110e:	ca 01       	movw	r24, r20
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	89 83       	std	Y+1, r24	; 0x01
				 if( Local_u8PinValue  == 0 ){
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	88 23       	and	r24, r24
    1118:	21 f4       	brne	.+8      	; 0x1122 <DIO_u8GetPinValue+0x172>
					*COPY_Pu8PinValue = LOGIC_LOW ;
    111a:	ed 81       	ldd	r30, Y+5	; 0x05
    111c:	fe 81       	ldd	r31, Y+6	; 0x06
    111e:	10 82       	st	Z, r1
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <DIO_u8GetPinValue+0x184>
				 }
				 else if ( Local_u8PinValue  == 1 ){
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	31 f4       	brne	.+12     	; 0x1134 <DIO_u8GetPinValue+0x184>
					 *COPY_Pu8PinValue = LOGIC_HIGH ;
    1128:	ed 81       	ldd	r30, Y+5	; 0x05
    112a:	fe 81       	ldd	r31, Y+6	; 0x06
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 83       	st	Z, r24
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <DIO_u8GetPinValue+0x184>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    1132:	1a 82       	std	Y+2, r1	; 0x02
}

	return   Local_u8ErrorState ; 
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
 } 
    1136:	28 96       	adiw	r28, 0x08	; 8
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_u8SetPortDirection>:
 
 
 u8  DIO_u8SetPortDirection(u8 COPY_u8PortId  ,u8 COPY_u8Direction) {
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_u8SetPortDirection+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_u8SetPortDirection+0x8>
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;  
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
	 if( (COPY_u8PortId <= PORTD)   &&  ((COPY_u8Direction == INPUT) ||(COPY_u8Direction == OUTPUT) ) ){
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	85 30       	cpi	r24, 0x05	; 5
    1162:	d0 f5       	brcc	.+116    	; 0x11d8 <DIO_u8SetPortDirection+0x90>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 23       	and	r24, r24
    1168:	19 f0       	breq	.+6      	; 0x1170 <DIO_u8SetPortDirection+0x28>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	a1 f5       	brne	.+104    	; 0x11d8 <DIO_u8SetPortDirection+0x90>
	 
	  switch (COPY_u8PortId){
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3d 83       	std	Y+5, r19	; 0x05
    1178:	2c 83       	std	Y+4, r18	; 0x04
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	91 05       	cpc	r25, r1
    1182:	d9 f0       	breq	.+54     	; 0x11ba <DIO_u8SetPortDirection+0x72>
    1184:	2c 81       	ldd	r18, Y+4	; 0x04
    1186:	3d 81       	ldd	r19, Y+5	; 0x05
    1188:	23 30       	cpi	r18, 0x03	; 3
    118a:	31 05       	cpc	r19, r1
    118c:	34 f4       	brge	.+12     	; 0x119a <DIO_u8SetPortDirection+0x52>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	61 f0       	breq	.+24     	; 0x11b0 <DIO_u8SetPortDirection+0x68>
    1198:	20 c0       	rjmp	.+64     	; 0x11da <DIO_u8SetPortDirection+0x92>
    119a:	2c 81       	ldd	r18, Y+4	; 0x04
    119c:	3d 81       	ldd	r19, Y+5	; 0x05
    119e:	23 30       	cpi	r18, 0x03	; 3
    11a0:	31 05       	cpc	r19, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <DIO_u8SetPortDirection+0x7c>
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	91 05       	cpc	r25, r1
    11ac:	81 f0       	breq	.+32     	; 0x11ce <DIO_u8SetPortDirection+0x86>
    11ae:	15 c0       	rjmp	.+42     	; 0x11da <DIO_u8SetPortDirection+0x92>
    case PORTA:
    	DDRA_REGISTER = COPY_u8Direction;
    11b0:	ea e3       	ldi	r30, 0x3A	; 58
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	80 83       	st	Z, r24
    11b8:	10 c0       	rjmp	.+32     	; 0x11da <DIO_u8SetPortDirection+0x92>
    	break ;
    case PORTB:
       	DDRB_REGISTER = COPY_u8Direction;
    11ba:	e7 e3       	ldi	r30, 0x37	; 55
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	80 83       	st	Z, r24
    11c2:	0b c0       	rjmp	.+22     	; 0x11da <DIO_u8SetPortDirection+0x92>
       	break ;
    case PORTC:
        DDRC_REGISTER = COPY_u8Direction;
    11c4:	e4 e3       	ldi	r30, 0x34	; 52
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	80 83       	st	Z, r24
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <DIO_u8SetPortDirection+0x92>
        break ;
    case PORTD:
       DDRB_REGISTER = COPY_u8Direction;
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	80 83       	st	Z, r24
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <DIO_u8SetPortDirection+0x92>
           	break ;

	 }}
	 
	 else{
	Local_u8ErrorState =STD_TYPES_NOK;
    11d8:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 
    11da:	89 81       	ldd	r24, Y+1	; 0x01
	 
 }
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <DIO_u8SetPortValue>:
 
 u8  DIO_u8SetPortValue(u8 COPY_u8PortId  ,u8 COPY_u8Value) {
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_u8SetPortValue+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_u8SetPortValue+0x8>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;   
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
     if( (COPY_u8PortId <= PORTD)){
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	85 30       	cpi	r24, 0x05	; 5
    1206:	98 f5       	brcc	.+102    	; 0x126e <DIO_u8SetPortValue+0x82>
	
	switch(COPY_u8PortId ){
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3d 83       	std	Y+5, r19	; 0x05
    1210:	2c 83       	std	Y+4, r18	; 0x04
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	d9 f0       	breq	.+54     	; 0x1252 <DIO_u8SetPortValue+0x66>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	23 30       	cpi	r18, 0x03	; 3
    1222:	31 05       	cpc	r19, r1
    1224:	34 f4       	brge	.+12     	; 0x1232 <DIO_u8SetPortValue+0x46>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	91 05       	cpc	r25, r1
    122e:	61 f0       	breq	.+24     	; 0x1248 <DIO_u8SetPortValue+0x5c>
    1230:	1e c0       	rjmp	.+60     	; 0x126e <DIO_u8SetPortValue+0x82>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	23 30       	cpi	r18, 0x03	; 3
    1238:	31 05       	cpc	r19, r1
    123a:	81 f0       	breq	.+32     	; 0x125c <DIO_u8SetPortValue+0x70>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	91 05       	cpc	r25, r1
    1244:	81 f0       	breq	.+32     	; 0x1266 <DIO_u8SetPortValue+0x7a>
    1246:	13 c0       	rjmp	.+38     	; 0x126e <DIO_u8SetPortValue+0x82>

			 	case PORTA :
			 		 PORTA_REGISTER = COPY_u8Value ;
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	80 83       	st	Z, r24
    1250:	0e c0       	rjmp	.+28     	; 0x126e <DIO_u8SetPortValue+0x82>
			 	 break ;

			 	case PORTB :
			 		 PORTB_REGISTER = COPY_u8Value ;
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	80 83       	st	Z, r24
    125a:	09 c0       	rjmp	.+18     	; 0x126e <DIO_u8SetPortValue+0x82>
			 		 break ;

			 	case PORTC :

			 		 PORTC_REGISTER = COPY_u8Value ;
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	80 83       	st	Z, r24
    1264:	04 c0       	rjmp	.+8      	; 0x126e <DIO_u8SetPortValue+0x82>
			 			break ;

			 	case PORTD :
			 		 PORTD_REGISTER = COPY_u8Value ;
    1266:	e2 e3       	ldi	r30, 0x32	; 50
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	80 83       	st	Z, r24



			 	}
	 }
	 return   Local_u8ErrorState ; 
    126e:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <DIO_u8GetPortValue>:
  
 u8  DIO_u8GetPortValue (u8 COPY_u8PortId , u8 *COPY_Pu8PortValue){
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_u8GetPortValue+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_u8GetPortValue+0x8>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_u8GetPortValue+0xa>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	7c 83       	std	Y+4, r23	; 0x04
    1292:	6b 83       	std	Y+3, r22	; 0x03
	 
u8 Local_u8ErrorState = STD_TYPES_OK ; 	 
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
  
 
if( (COPY_u8PortId <= PORTD)  && (COPY_Pu8PortValue != NULL  ) ) { // ptr >> is a variable in main to store the state of pin on it
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	85 30       	cpi	r24, 0x05	; 5
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <DIO_u8GetPortValue+0x20>
    129e:	40 c0       	rjmp	.+128    	; 0x1320 <DIO_u8GetPortValue+0xa0>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	e1 f1       	breq	.+120    	; 0x1320 <DIO_u8GetPortValue+0xa0>

	 switch(COPY_u8PortId ){
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3e 83       	std	Y+6, r19	; 0x06
    12b0:	2d 83       	std	Y+5, r18	; 0x05
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	91 05       	cpc	r25, r1
    12ba:	e9 f0       	breq	.+58     	; 0x12f6 <DIO_u8GetPortValue+0x76>
    12bc:	2d 81       	ldd	r18, Y+5	; 0x05
    12be:	3e 81       	ldd	r19, Y+6	; 0x06
    12c0:	23 30       	cpi	r18, 0x03	; 3
    12c2:	31 05       	cpc	r19, r1
    12c4:	34 f4       	brge	.+12     	; 0x12d2 <DIO_u8GetPortValue+0x52>
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_u8GetPortValue+0x68>
    12d0:	28 c0       	rjmp	.+80     	; 0x1322 <DIO_u8GetPortValue+0xa2>
    12d2:	2d 81       	ldd	r18, Y+5	; 0x05
    12d4:	3e 81       	ldd	r19, Y+6	; 0x06
    12d6:	23 30       	cpi	r18, 0x03	; 3
    12d8:	31 05       	cpc	r19, r1
    12da:	a1 f0       	breq	.+40     	; 0x1304 <DIO_u8GetPortValue+0x84>
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	91 05       	cpc	r25, r1
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <DIO_u8GetPortValue+0x92>
    12e6:	1d c0       	rjmp	.+58     	; 0x1322 <DIO_u8GetPortValue+0xa2>

	 	 	case PORTA :
	 	 		*COPY_Pu8PortValue = PINA_REGISTER;
    12e8:	e9 e3       	ldi	r30, 0x39	; 57
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	80 83       	st	Z, r24
    12f4:	16 c0       	rjmp	.+44     	; 0x1322 <DIO_u8GetPortValue+0xa2>
				 
	 	 	 break ;

	 	 	case PORTB :
	 	 		 *COPY_Pu8PortValue = PINB_REGISTER;
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	eb 81       	ldd	r30, Y+3	; 0x03
    12fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1300:	80 83       	st	Z, r24
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

	 	 	case PORTC :
	 	 		 *COPY_Pu8PortValue = PINC_REGISTER;
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	eb 81       	ldd	r30, Y+3	; 0x03
    130c:	fc 81       	ldd	r31, Y+4	; 0x04
    130e:	80 83       	st	Z, r24
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <DIO_u8GetPortValue+0xa2>
	 	 			break ;

	 	 	case PORTD :
	 	 		 *COPY_Pu8PortValue = PIND_REGISTER ;
    1312:	e0 e3       	ldi	r30, 0x30	; 48
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	eb 81       	ldd	r30, Y+3	; 0x03
    131a:	fc 81       	ldd	r31, Y+4	; 0x04
    131c:	80 83       	st	Z, r24
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <DIO_u8GetPortValue+0xa2>
	 	 		 break ;

}}

else{
	Local_u8ErrorState =STD_TYPES_NOK;
    1320:	19 82       	std	Y+1, r1	; 0x01
}

	return   Local_u8ErrorState ; 	 
    1322:	89 81       	ldd	r24, Y+1	; 0x01
	 
	 
	 
 }
    1324:	26 96       	adiw	r28, 0x06	; 6
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <EXTI_SET_CALL_BACK>:

/* Global Pointer To Function */
static  void (*EXTI_APFEXTI[3])(void) = { NULL , NULL , NULL };
 

u8 EXTI_SET_CALL_BACK(void(*ptr)(void) , u8 indix ){
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <EXTI_SET_CALL_BACK+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <EXTI_SET_CALL_BACK+0x8>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9b 83       	std	Y+3, r25	; 0x03
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	6c 83       	std	Y+4, r22	; 0x04
  u8 local_u8Error_state =STD_TYPES_OK ;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
  if(indix <=EXT2  && ptr !=NULL){
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	88 f4       	brcc	.+34     	; 0x1374 <EXTI_SET_CALL_BACK+0x3e>
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	69 f0       	breq	.+26     	; 0x1374 <EXTI_SET_CALL_BACK+0x3e>
  EXTI_APFEXTI[indix]=ptr;
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	fc 01       	movw	r30, r24
    1366:	e0 53       	subi	r30, 0x30	; 48
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <EXTI_SET_CALL_BACK+0x40>
  }
  else{
	  local_u8Error_state =STD_TYPES_NOK ;
    1374:	19 82       	std	Y+1, r1	; 0x01
	  
  }
 return local_u8Error_state ;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <EXTI_u8EXTEnable>:
 


u8 EXTI_u8EXTEnable(u8 copy_u8EXTIINDEX,  u8 copy_u8edge){
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	2b 97       	sbiw	r28, 0x0b	; 11
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	6b 83       	std	Y+3, r22	; 0x03
 u8 local_u8Error_state = STD_TYPES_OK ;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8EXTIINDEX){
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3b 87       	std	Y+11, r19	; 0x0b
    13aa:	2a 87       	std	Y+10, r18	; 0x0a
    13ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <EXTI_u8EXTEnable+0x32>
    13b6:	85 c0       	rjmp	.+266    	; 0x14c2 <EXTI_u8EXTEnable+0x13c>
    13b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    13ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <EXTI_u8EXTEnable+0x3e>
    13c2:	f9 c0       	rjmp	.+498    	; 0x15b6 <EXTI_u8EXTEnable+0x230>
    13c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	09 f0       	breq	.+2      	; 0x13ce <EXTI_u8EXTEnable+0x48>
    13cc:	23 c1       	rjmp	.+582    	; 0x1614 <EXTI_u8EXTEnable+0x28e>
		
		case EXT0:
		
		/* select Edge source */
		
		switch(copy_u8edge){
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	39 87       	std	Y+9, r19	; 0x09
    13d6:	28 87       	std	Y+8, r18	; 0x08
    13d8:	88 85       	ldd	r24, Y+8	; 0x08
    13da:	99 85       	ldd	r25, Y+9	; 0x09
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	61 f1       	breq	.+88     	; 0x143a <EXTI_u8EXTEnable+0xb4>
    13e2:	28 85       	ldd	r18, Y+8	; 0x08
    13e4:	39 85       	ldd	r19, Y+9	; 0x09
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <EXTI_u8EXTEnable+0x70>
    13ec:	88 85       	ldd	r24, Y+8	; 0x08
    13ee:	99 85       	ldd	r25, Y+9	; 0x09
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	69 f0       	breq	.+26     	; 0x140e <EXTI_u8EXTEnable+0x88>
    13f4:	64 c0       	rjmp	.+200    	; 0x14be <EXTI_u8EXTEnable+0x138>
    13f6:	28 85       	ldd	r18, Y+8	; 0x08
    13f8:	39 85       	ldd	r19, Y+9	; 0x09
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	99 f1       	breq	.+102    	; 0x1466 <EXTI_u8EXTEnable+0xe0>
    1400:	88 85       	ldd	r24, Y+8	; 0x08
    1402:	99 85       	ldd	r25, Y+9	; 0x09
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <EXTI_u8EXTEnable+0x86>
    140a:	43 c0       	rjmp	.+134    	; 0x1492 <EXTI_u8EXTEnable+0x10c>
    140c:	58 c0       	rjmp	.+176    	; 0x14be <EXTI_u8EXTEnable+0x138>
			case rising_edge:
               
			   SET_BIT(EXTI_u8_MCUCR,ISC01);
    140e:	a5 e5       	ldi	r26, 0x55	; 85
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e5       	ldi	r30, 0x55	; 85
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	82 60       	ori	r24, 0x02	; 2
    141a:	8c 93       	st	X, r24
               SET_BIT(EXTI_u8_MCUCR,ISC00);
    141c:	a5 e5       	ldi	r26, 0x55	; 85
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e5       	ldi	r30, 0x55	; 85
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	8c 93       	st	X, r24
			   		/* ENABLE EXTI0  */   
		
		       SET_BIT(EXTI_u8_GICR,INT0);
    142a:	ab e5       	ldi	r26, 0x5B	; 91
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e5       	ldi	r30, 0x5B	; 91
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 64       	ori	r24, 0x40	; 64
    1436:	8c 93       	st	X, r24
    1438:	ee c0       	rjmp	.+476    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			   
            break ;
			
			case Falling_edge:
 
               SET_BIT(EXTI_u8_MCUCR,ISC01);
    143a:	a5 e5       	ldi	r26, 0x55	; 85
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e5 e5       	ldi	r30, 0x55	; 85
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	8c 93       	st	X, r24
               CLR_BIT(EXTI_u8_MCUCR,ISC00);
    1448:	a5 e5       	ldi	r26, 0x55	; 85
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e5       	ldi	r30, 0x55	; 85
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8e 7f       	andi	r24, 0xFE	; 254
    1454:	8c 93       	st	X, r24
		        /* ENABLE EXTI0  */
		
		        SET_BIT(EXTI_u8_GICR,INT0);			   
    1456:	ab e5       	ldi	r26, 0x5B	; 91
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e5       	ldi	r30, 0x5B	; 91
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 64       	ori	r24, 0x40	; 64
    1462:	8c 93       	st	X, r24
    1464:	d8 c0       	rjmp	.+432    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			break ;
			
			case Any_logical_change :
			
                SET_BIT(EXTI_u8_MCUCR,ISC00);
    1466:	a5 e5       	ldi	r26, 0x55	; 85
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e5       	ldi	r30, 0x55	; 85
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	81 60       	ori	r24, 0x01	; 1
    1472:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR,ISC01);
    1474:	a5 e5       	ldi	r26, 0x55	; 85
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e5       	ldi	r30, 0x55	; 85
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8d 7f       	andi	r24, 0xFD	; 253
    1480:	8c 93       	st	X, r24

                     /* ENABLE EXTI0  */
		
		         SET_BIT(EXTI_u8_GICR,INT0);
    1482:	ab e5       	ldi	r26, 0x5B	; 91
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	eb e5       	ldi	r30, 0x5B	; 91
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	80 64       	ori	r24, 0x40	; 64
    148e:	8c 93       	st	X, r24
    1490:	c2 c0       	rjmp	.+388    	; 0x1616 <EXTI_u8EXTEnable+0x290>
				
			break;
			
			case low_level:
			
			 CLR_BIT(EXTI_u8_MCUCR,ISC00);
    1492:	a5 e5       	ldi	r26, 0x55	; 85
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e5       	ldi	r30, 0x55	; 85
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	8c 93       	st	X, r24
             CLR_BIT(EXTI_u8_MCUCR,ISC01);
    14a0:	a5 e5       	ldi	r26, 0x55	; 85
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e5       	ldi	r30, 0x55	; 85
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	8c 93       	st	X, r24
			 		/* ENABLE EXTI0  */
		
		        SET_BIT(EXTI_u8_GICR,INT0);
    14ae:	ab e5       	ldi	r26, 0x5B	; 91
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e5       	ldi	r30, 0x5B	; 91
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 64       	ori	r24, 0x40	; 64
    14ba:	8c 93       	st	X, r24
    14bc:	ac c0       	rjmp	.+344    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			 
			break ;
			
			default:
			
			local_u8Error_state =STD_TYPES_NOK ;
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	aa c0       	rjmp	.+340    	; 0x1616 <EXTI_u8EXTEnable+0x290>
 
		
          break ;
		
		case EXT1:
          switch(copy_u8edge){
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3f 83       	std	Y+7, r19	; 0x07
    14ca:	2e 83       	std	Y+6, r18	; 0x06
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	9f 81       	ldd	r25, Y+7	; 0x07
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	61 f1       	breq	.+88     	; 0x152e <EXTI_u8EXTEnable+0x1a8>
    14d6:	2e 81       	ldd	r18, Y+6	; 0x06
    14d8:	3f 81       	ldd	r19, Y+7	; 0x07
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <EXTI_u8EXTEnable+0x164>
    14e0:	8e 81       	ldd	r24, Y+6	; 0x06
    14e2:	9f 81       	ldd	r25, Y+7	; 0x07
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	69 f0       	breq	.+26     	; 0x1502 <EXTI_u8EXTEnable+0x17c>
    14e8:	64 c0       	rjmp	.+200    	; 0x15b2 <EXTI_u8EXTEnable+0x22c>
    14ea:	2e 81       	ldd	r18, Y+6	; 0x06
    14ec:	3f 81       	ldd	r19, Y+7	; 0x07
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	99 f1       	breq	.+102    	; 0x155a <EXTI_u8EXTEnable+0x1d4>
    14f4:	8e 81       	ldd	r24, Y+6	; 0x06
    14f6:	9f 81       	ldd	r25, Y+7	; 0x07
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <EXTI_u8EXTEnable+0x17a>
    14fe:	43 c0       	rjmp	.+134    	; 0x1586 <EXTI_u8EXTEnable+0x200>
    1500:	58 c0       	rjmp	.+176    	; 0x15b2 <EXTI_u8EXTEnable+0x22c>
			case rising_edge:
               
			   SET_BIT(EXTI_u8_MCUCR,ISC11);
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 60       	ori	r24, 0x08	; 8
    150e:	8c 93       	st	X, r24
               SET_BIT(EXTI_u8_MCUCR,ISC10);
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e5       	ldi	r30, 0x55	; 85
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	84 60       	ori	r24, 0x04	; 4
    151c:	8c 93       	st	X, r24
			   
			   	/* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    151e:	ab e5       	ldi	r26, 0x5B	; 91
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	eb e5       	ldi	r30, 0x5B	; 91
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	80 68       	ori	r24, 0x80	; 128
    152a:	8c 93       	st	X, r24
    152c:	74 c0       	rjmp	.+232    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			   
            break ;
			
			case Falling_edge:
 
               SET_BIT(EXTI_u8_MCUCR,ISC11);
    152e:	a5 e5       	ldi	r26, 0x55	; 85
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e5 e5       	ldi	r30, 0x55	; 85
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 60       	ori	r24, 0x08	; 8
    153a:	8c 93       	st	X, r24
               CLR_BIT(EXTI_u8_MCUCR,ISC10);
    153c:	a5 e5       	ldi	r26, 0x55	; 85
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e5       	ldi	r30, 0x55	; 85
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8b 7f       	andi	r24, 0xFB	; 251
    1548:	8c 93       	st	X, r24
			   
			   	/* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    154a:	ab e5       	ldi	r26, 0x5B	; 91
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e5       	ldi	r30, 0x5B	; 91
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	80 68       	ori	r24, 0x80	; 128
    1556:	8c 93       	st	X, r24
    1558:	5e c0       	rjmp	.+188    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			   
			break ;
			
			case Any_logical_change :
			
                SET_BIT(EXTI_u8_MCUCR,ISC10);
    155a:	a5 e5       	ldi	r26, 0x55	; 85
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e5       	ldi	r30, 0x55	; 85
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	84 60       	ori	r24, 0x04	; 4
    1566:	8c 93       	st	X, r24
                CLR_BIT(EXTI_u8_MCUCR,ISC11);
    1568:	a5 e5       	ldi	r26, 0x55	; 85
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e5       	ldi	r30, 0x55	; 85
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	87 7f       	andi	r24, 0xF7	; 247
    1574:	8c 93       	st	X, r24
				
			 	  /* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    1576:	ab e5       	ldi	r26, 0x5B	; 91
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	eb e5       	ldi	r30, 0x5B	; 91
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 68       	ori	r24, 0x80	; 128
    1582:	8c 93       	st	X, r24
    1584:	48 c0       	rjmp	.+144    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			break;
			
			case low_level:
			
			 CLR_BIT(EXTI_u8_MCUCR,ISC11);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	87 7f       	andi	r24, 0xF7	; 247
    1592:	8c 93       	st	X, r24
             CLR_BIT(EXTI_u8_MCUCR,ISC10);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8b 7f       	andi	r24, 0xFB	; 251
    15a0:	8c 93       	st	X, r24
			 
			 	/* ENABLE EXTI1  */   
		
		       SET_BIT(EXTI_u8_GICR,INT1);
    15a2:	ab e5       	ldi	r26, 0x5B	; 91
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e5       	ldi	r30, 0x5B	; 91
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 68       	ori	r24, 0x80	; 128
    15ae:	8c 93       	st	X, r24
    15b0:	32 c0       	rjmp	.+100    	; 0x1616 <EXTI_u8EXTEnable+0x290>
			 
			break ;
			default:
			
			 local_u8Error_state =STD_TYPES_NOK ;
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	30 c0       	rjmp	.+96     	; 0x1616 <EXTI_u8EXTEnable+0x290>
		}		
		break ;
		
		case EXT2:
		
		 switch(copy_u8edge){
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3d 83       	std	Y+5, r19	; 0x05
    15be:	2c 83       	std	Y+4, r18	; 0x04
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	31 f0       	breq	.+12     	; 0x15d4 <EXTI_u8EXTEnable+0x24e>
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	21 30       	cpi	r18, 0x01	; 1
    15ce:	31 05       	cpc	r19, r1
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <EXTI_u8EXTEnable+0x26c>
    15d2:	1e c0       	rjmp	.+60     	; 0x1610 <EXTI_u8EXTEnable+0x28a>
			case rising_edge:
               
			   SET_BIT(EXTI_u8_MCUCSR,ISC2);
    15d4:	a4 e5       	ldi	r26, 0x54	; 84
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e4 e5       	ldi	r30, 0x54	; 84
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 64       	ori	r24, 0x40	; 64
    15e0:	8c 93       	st	X, r24
 
			    	/* ENABLE EXTI2  */   
		
		       SET_BIT(EXTI_u8_GICR,INT2);
    15e2:	ab e5       	ldi	r26, 0x5B	; 91
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e5       	ldi	r30, 0x5B	; 91
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 62       	ori	r24, 0x20	; 32
    15ee:	8c 93       	st	X, r24
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <EXTI_u8EXTEnable+0x290>
			   
            break ;
			
			case Falling_edge:
 
               CLR_BIT(EXTI_u8_MCUCSR,ISC2);
    15f2:	a4 e5       	ldi	r26, 0x54	; 84
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e4 e5       	ldi	r30, 0x54	; 84
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 7b       	andi	r24, 0xBF	; 191
    15fe:	8c 93       	st	X, r24
			   
			   	/* ENABLE EXTI2  */   
		
		       SET_BIT(EXTI_u8_GICR,INT2);
    1600:	ab e5       	ldi	r26, 0x5B	; 91
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	eb e5       	ldi	r30, 0x5B	; 91
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 62       	ori	r24, 0x20	; 32
    160c:	8c 93       	st	X, r24
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <EXTI_u8EXTEnable+0x290>
			   
		    break ;
		    
			default:
			
			local_u8Error_state =STD_TYPES_NOK ;
    1610:	19 82       	std	Y+1, r1	; 0x01
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <EXTI_u8EXTEnable+0x290>
		 }
	     break ;
		
		default:  
			
			local_u8Error_state =STD_TYPES_NOK ;
    1614:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return local_u8Error_state;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1618:	2b 96       	adiw	r28, 0x0b	; 11
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <EXTI_u8EXTDisable>:




u8 EXTI_u8EXTDisable(u8 copy_u8EXTIINDEX ){
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <EXTI_u8EXTDisable+0x6>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <EXTI_u8EXTDisable+0x8>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	8a 83       	std	Y+2, r24	; 0x02
	
 u8 local_u8Error_state=STD_TYPES_OK ;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8EXTIINDEX){
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3c 83       	std	Y+4, r19	; 0x04
    1644:	2b 83       	std	Y+3, r18	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	89 f0       	breq	.+34     	; 0x1672 <EXTI_u8EXTDisable+0x48>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	a1 f0       	breq	.+40     	; 0x1682 <EXTI_u8EXTDisable+0x58>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	c1 f4       	brne	.+48     	; 0x1692 <EXTI_u8EXTDisable+0x68>
		
		case EXT0:

			  /* DisABLE EXTI0  */   
		
		       CLR_BIT(EXTI_u8_GICR,INT0);
    1662:	ab e5       	ldi	r26, 0x5B	; 91
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb e5       	ldi	r30, 0x5B	; 91
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8f 7b       	andi	r24, 0xBF	; 191
    166e:	8c 93       	st	X, r24
    1670:	11 c0       	rjmp	.+34     	; 0x1694 <EXTI_u8EXTDisable+0x6a>
		
		case EXT1:
 
         	   /* DisABLE EXTI1  */   
		
		      CLR_BIT(EXTI_u8_GICR,INT1);
    1672:	ab e5       	ldi	r26, 0x5B	; 91
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	eb e5       	ldi	r30, 0x5B	; 91
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8f 77       	andi	r24, 0x7F	; 127
    167e:	8c 93       	st	X, r24
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <EXTI_u8EXTDisable+0x6a>
		
		case EXT2:
 
           	/* DisABLE EXTI2  */   
		
		     CLR_BIT(EXTI_u8_GICR,INT2);
    1682:	ab e5       	ldi	r26, 0x5B	; 91
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	eb e5       	ldi	r30, 0x5B	; 91
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8f 7d       	andi	r24, 0xDF	; 223
    168e:	8c 93       	st	X, r24
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <EXTI_u8EXTDisable+0x6a>
         break ;
		
		default:  
			
			local_u8Error_state =STD_TYPES_NOK ;
    1692:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return local_u8Error_state;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <__vector_1>:
/* prototype for ISR of EXTI0*/

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	2f 93       	push	r18
    16b0:	3f 93       	push	r19
    16b2:	4f 93       	push	r20
    16b4:	5f 93       	push	r21
    16b6:	6f 93       	push	r22
    16b8:	7f 93       	push	r23
    16ba:	8f 93       	push	r24
    16bc:	9f 93       	push	r25
    16be:	af 93       	push	r26
    16c0:	bf 93       	push	r27
    16c2:	ef 93       	push	r30
    16c4:	ff 93       	push	r31
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
  if(EXTI_APFEXTI[EXT0] != NULL){	
    16ce:	80 91 d0 00 	lds	r24, 0x00D0
    16d2:	90 91 d1 00 	lds	r25, 0x00D1
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <__vector_1+0x40>
  EXTI_APFEXTI[0]();
    16da:	e0 91 d0 00 	lds	r30, 0x00D0
    16de:	f0 91 d1 00 	lds	r31, 0x00D1
    16e2:	09 95       	icall
  }
	
}
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	ff 91       	pop	r31
    16ea:	ef 91       	pop	r30
    16ec:	bf 91       	pop	r27
    16ee:	af 91       	pop	r26
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <GI_voidEnable>:
#include "GLOPAL_INT.h"

#define  SREG             *((volatile u8 *)(0x5f))


void  GI_voidEnable(void){
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
/* ENABLE  GIE */

SET_BIT(SREG,7);	
    1712:	af e5       	ldi	r26, 0x5F	; 95
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ef e5       	ldi	r30, 0x5F	; 95
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 68       	ori	r24, 0x80	; 128
    171e:	8c 93       	st	X, r24
	
	
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <GI_voidDisAble>:
void  GI_voidDisAble(void){
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,7);
    172e:	af e5       	ldi	r26, 0x5F	; 95
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ef e5       	ldi	r30, 0x5F	; 95
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 77       	andi	r24, 0x7F	; 127
    173a:	8c 93       	st	X, r24
	
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <KPD_u8KpdGetKeyState>:
 

const u8 Kpd_rows [4] ={KPD_RL1_PIN,KPD_RL2_PIN,KPD_RL3_PIN,KPD_RL4_PIN} ;
const u8 Kpd_cols [4] ={KPD_CL1_PIN,KPD_CL2_PIN,KPD_CL3_PIN,KPD_CL4_PIN} ;

u8 KPD_u8KpdGetKeyState(u8 * Copy_pu8RteurnedKey){
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	65 97       	sbiw	r28, 0x15	; 21
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	9d 8b       	std	Y+21, r25	; 0x15
    1758:	8c 8b       	std	Y+20, r24	; 0x14
	*Copy_pu8RteurnedKey = Kpd_keynotpressed ;
    175a:	ec 89       	ldd	r30, Y+20	; 0x14
    175c:	fd 89       	ldd	r31, Y+21	; 0x15
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	80 83       	st	Z, r24

	 u8 LOCAL_ERROR_STATE = STD_TYPES_OK;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	8a 8b       	std	Y+18, r24	; 0x12
	 u8 local_u8Rowscounter ;
	 u8 local_u8CLScounter ;
	  u8 local_u8PinValue;
	  u8 local_flage =0 ;
    1766:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8RteurnedKey !=NULL){
    1768:	8c 89       	ldd	r24, Y+20	; 0x14
    176a:	9d 89       	ldd	r25, Y+21	; 0x15
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	09 f4       	brne	.+2      	; 0x1772 <KPD_u8KpdGetKeyState+0x30>
    1770:	ec c0       	rjmp	.+472    	; 0x194a <KPD_u8KpdGetKeyState+0x208>
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
    1772:	19 8a       	std	Y+17, r1	; 0x11
    1774:	e5 c0       	rjmp	.+458    	; 0x1940 <KPD_u8KpdGetKeyState+0x1fe>
		   DIO_u8SetPinValue(KPD_PORT,  Kpd_rows[local_u8Rowscounter], LOGIC_LOW);
    1776:	89 89       	ldd	r24, Y+17	; 0x11
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	fc 01       	movw	r30, r24
    177e:	e9 53       	subi	r30, 0x39	; 57
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	90 81       	ld	r25, Z
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	69 2f       	mov	r22, r25
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
		   
		   for(local_u8CLScounter =0 ; local_u8CLScounter <= 3 ; local_u8CLScounter++){
    178e:	18 8a       	std	Y+16, r1	; 0x10
    1790:	c1 c0       	rjmp	.+386    	; 0x1914 <KPD_u8KpdGetKeyState+0x1d2>
			  
			   DIO_u8GetPinValue(KPD_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    1792:	88 89       	ldd	r24, Y+16	; 0x10
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	fc 01       	movw	r30, r24
    179a:	e5 53       	subi	r30, 0x35	; 53
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	90 81       	ld	r25, Z
    17a0:	9e 01       	movw	r18, r28
    17a2:	2d 5e       	subi	r18, 0xED	; 237
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	84 e0       	ldi	r24, 0x04	; 4
    17a8:	69 2f       	mov	r22, r25
    17aa:	a9 01       	movw	r20, r18
    17ac:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8GetPinValue>
				  
			  if(local_u8PinValue == LOGIC_LOW){  /*Switch is presed */
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	88 23       	and	r24, r24
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <KPD_u8KpdGetKeyState+0x76>
    17b6:	ab c0       	rjmp	.+342    	; 0x190e <KPD_u8KpdGetKeyState+0x1cc>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 ea       	ldi	r26, 0xA0	; 160
    17be:	b1 e4       	ldi	r27, 0x41	; 65
    17c0:	8b 87       	std	Y+11, r24	; 0x0b
    17c2:	9c 87       	std	Y+12, r25	; 0x0c
    17c4:	ad 87       	std	Y+13, r26	; 0x0d
    17c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8f 83       	std	Y+7, r24	; 0x07
    17e2:	98 87       	std	Y+8, r25	; 0x08
    17e4:	a9 87       	std	Y+9, r26	; 0x09
    17e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <KPD_u8KpdGetKeyState+0xc8>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <KPD_u8KpdGetKeyState+0x146>
	else if (__tmp > 65535)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <KPD_u8KpdGetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6b 85       	ldd	r22, Y+11	; 0x0b
    1824:	7c 85       	ldd	r23, Y+12	; 0x0c
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	9e 85       	ldd	r25, Y+14	; 0x0e
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	0f c0       	rjmp	.+30     	; 0x186a <KPD_u8KpdGetKeyState+0x128>
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <KPD_u8KpdGetKeyState+0x116>
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <KPD_u8KpdGetKeyState+0x10a>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <KPD_u8KpdGetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <KPD_u8KpdGetKeyState+0x152>
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
				   _delay_ms(20); // FOR BOUNCING 
				   /* check if the pin is still low */
				   DIO_u8GetPinValue(KPD_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    189c:	88 89       	ldd	r24, Y+16	; 0x10
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	fc 01       	movw	r30, r24
    18a4:	e5 53       	subi	r30, 0x35	; 53
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	90 81       	ld	r25, Z
    18aa:	9e 01       	movw	r18, r28
    18ac:	2d 5e       	subi	r18, 0xED	; 237
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	84 e0       	ldi	r24, 0x04	; 4
    18b2:	69 2f       	mov	r22, r25
    18b4:	a9 01       	movw	r20, r18
    18b6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8GetPinValue>
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <KPD_u8KpdGetKeyState+0x198>
			     while(local_u8PinValue == LOGIC_LOW){  // TO TAKE READ OF PIN ONE TIME 
			    	 DIO_u8GetPinValue(KPD_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
    18bc:	88 89       	ldd	r24, Y+16	; 0x10
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	e5 53       	subi	r30, 0x35	; 53
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	90 81       	ld	r25, Z
    18ca:	9e 01       	movw	r18, r28
    18cc:	2d 5e       	subi	r18, 0xED	; 237
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	69 2f       	mov	r22, r25
    18d4:	a9 01       	movw	r20, r18
    18d6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8GetPinValue>
				  
			  if(local_u8PinValue == LOGIC_LOW){  /*Switch is presed */
				   _delay_ms(20); // FOR BOUNCING 
				   /* check if the pin is still low */
				   DIO_u8GetPinValue(KPD_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
			     while(local_u8PinValue == LOGIC_LOW){  // TO TAKE READ OF PIN ONE TIME 
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	88 23       	and	r24, r24
    18de:	71 f3       	breq	.-36     	; 0x18bc <KPD_u8KpdGetKeyState+0x17a>
			    	 DIO_u8GetPinValue(KPD_PORT,Kpd_cols[local_u8CLScounter],&local_u8PinValue );
				 }
				 local_flage =1 ;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	8f 87       	std	Y+15, r24	; 0x0f
			  * Copy_pu8RteurnedKey = KPD_Au8Keys[local_u8Rowscounter][local_u8CLScounter];
    18e4:	89 89       	ldd	r24, Y+17	; 0x11
    18e6:	48 2f       	mov	r20, r24
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	88 89       	ldd	r24, Y+16	; 0x10
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	ca 01       	movw	r24, r20
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	fc 01       	movw	r30, r24
    1900:	e9 54       	subi	r30, 0x49	; 73
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	ec 89       	ldd	r30, Y+20	; 0x14
    1908:	fd 89       	ldd	r31, Y+21	; 0x15
    190a:	80 83       	st	Z, r24
    190c:	07 c0       	rjmp	.+14     	; 0x191c <KPD_u8KpdGetKeyState+0x1da>
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
		   DIO_u8SetPinValue(KPD_PORT,  Kpd_rows[local_u8Rowscounter], LOGIC_LOW);
		   
		   for(local_u8CLScounter =0 ; local_u8CLScounter <= 3 ; local_u8CLScounter++){
    190e:	88 89       	ldd	r24, Y+16	; 0x10
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	88 8b       	std	Y+16, r24	; 0x10
    1914:	88 89       	ldd	r24, Y+16	; 0x10
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	08 f4       	brcc	.+2      	; 0x191c <KPD_u8KpdGetKeyState+0x1da>
    191a:	3b cf       	rjmp	.-394    	; 0x1792 <KPD_u8KpdGetKeyState+0x50>
			  * Copy_pu8RteurnedKey = KPD_Au8Keys[local_u8Rowscounter][local_u8CLScounter];
			  break ; 
		   }	  }
		   
		   /* diactivate Row */
          DIO_u8SetPinValue(KPD_PORT,  Kpd_rows[local_u8Rowscounter], LOGIC_HIGH); 
    191c:	89 89       	ldd	r24, Y+17	; 0x11
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	fc 01       	movw	r30, r24
    1924:	e9 53       	subi	r30, 0x39	; 57
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	90 81       	ld	r25, Z
    192a:	84 e0       	ldi	r24, 0x04	; 4
    192c:	69 2f       	mov	r22, r25
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
		   if(local_flage){
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	88 23       	and	r24, r24
    1938:	49 f4       	brne	.+18     	; 0x194c <KPD_u8KpdGetKeyState+0x20a>
	  u8 local_u8PinValue;
	  u8 local_flage =0 ;
	if(Copy_pu8RteurnedKey !=NULL){
	   /* Activation Each Row => for loop on the pins of rows */
	   
	   for(local_u8Rowscounter =0 ; local_u8Rowscounter <=3 ; local_u8Rowscounter++){
    193a:	89 89       	ldd	r24, Y+17	; 0x11
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	89 8b       	std	Y+17, r24	; 0x11
    1940:	89 89       	ldd	r24, Y+17	; 0x11
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	08 f4       	brcc	.+2      	; 0x1948 <KPD_u8KpdGetKeyState+0x206>
    1946:	17 cf       	rjmp	.-466    	; 0x1776 <KPD_u8KpdGetKeyState+0x34>
    1948:	01 c0       	rjmp	.+2      	; 0x194c <KPD_u8KpdGetKeyState+0x20a>
		   
	   }
	}
	else{
		
		LOCAL_ERROR_STATE = STD_TYPES_NOK;
    194a:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return LOCAL_ERROR_STATE ;
    194c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    194e:	65 96       	adiw	r28, 0x15	; 21
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <LCD_INIT>:
#include "LCD_PRV.h"


 
 
 void LCD_INIT(void){
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	e8 97       	sbiw	r28, 0x38	; 56
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE == LCD_u8_Mode_8_bit
 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	ac e0       	ldi	r26, 0x0C	; 12
    1984:	b2 e4       	ldi	r27, 0x42	; 66
    1986:	8d ab       	std	Y+53, r24	; 0x35
    1988:	9e ab       	std	Y+54, r25	; 0x36
    198a:	af ab       	std	Y+55, r26	; 0x37
    198c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6d a9       	ldd	r22, Y+53	; 0x35
    1990:	7e a9       	ldd	r23, Y+54	; 0x36
    1992:	8f a9       	ldd	r24, Y+55	; 0x37
    1994:	98 ad       	ldd	r25, Y+56	; 0x38
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	89 ab       	std	Y+49, r24	; 0x31
    19a8:	9a ab       	std	Y+50, r25	; 0x32
    19aa:	ab ab       	std	Y+51, r26	; 0x33
    19ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ae:	69 a9       	ldd	r22, Y+49	; 0x31
    19b0:	7a a9       	ldd	r23, Y+50	; 0x32
    19b2:	8b a9       	ldd	r24, Y+51	; 0x33
    19b4:	9c a9       	ldd	r25, Y+52	; 0x34
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_INIT+0x70>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 ab       	std	Y+48, r25	; 0x30
    19cc:	8f a7       	std	Y+47, r24	; 0x2f
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_INIT+0xee>
	else if (__tmp > 65535)
    19d0:	69 a9       	ldd	r22, Y+49	; 0x31
    19d2:	7a a9       	ldd	r23, Y+50	; 0x32
    19d4:	8b a9       	ldd	r24, Y+51	; 0x33
    19d6:	9c a9       	ldd	r25, Y+52	; 0x34
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_INIT+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6d a9       	ldd	r22, Y+53	; 0x35
    19ea:	7e a9       	ldd	r23, Y+54	; 0x36
    19ec:	8f a9       	ldd	r24, Y+55	; 0x37
    19ee:	98 ad       	ldd	r25, Y+56	; 0x38
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	98 ab       	std	Y+48, r25	; 0x30
    1a0e:	8f a7       	std	Y+47, r24	; 0x2f
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_INIT+0xd0>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9e a7       	std	Y+46, r25	; 0x2e
    1a18:	8d a7       	std	Y+45, r24	; 0x2d
    1a1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_INIT+0xbe>
    1a22:	9e a7       	std	Y+46, r25	; 0x2e
    1a24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a28:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	98 ab       	std	Y+48, r25	; 0x30
    1a2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a32:	98 a9       	ldd	r25, Y+48	; 0x30
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_INIT+0xb2>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <LCD_INIT+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a40:	9c a9       	ldd	r25, Y+52	; 0x34
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	98 ab       	std	Y+48, r25	; 0x30
    1a4c:	8f a7       	std	Y+47, r24	; 0x2f
    1a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a50:	98 a9       	ldd	r25, Y+48	; 0x30
    1a52:	9c a7       	std	Y+44, r25	; 0x2c
    1a54:	8b a7       	std	Y+43, r24	; 0x2b
    1a56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_INIT+0xfa>
    1a5e:	9c a7       	std	Y+44, r25	; 0x2c
    1a60:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms(35);
	 LCD_WRITE_COMMAND(lcd_FunctionSet8bit);
    1a62:	88 e3       	ldi	r24, 0x38	; 56
    1a64:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a6e:	b0 e4       	ldi	r27, 0x40	; 64
    1a70:	8f a3       	std	Y+39, r24	; 0x27
    1a72:	98 a7       	std	Y+40, r25	; 0x28
    1a74:	a9 a7       	std	Y+41, r26	; 0x29
    1a76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a ef       	ldi	r20, 0xFA	; 250
    1a86:	54 e4       	ldi	r21, 0x44	; 68
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8b a3       	std	Y+35, r24	; 0x23
    1a92:	9c a3       	std	Y+36, r25	; 0x24
    1a94:	ad a3       	std	Y+37, r26	; 0x25
    1a96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a98:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <LCD_INIT+0x15a>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9a a3       	std	Y+34, r25	; 0x22
    1ab6:	89 a3       	std	Y+33, r24	; 0x21
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <LCD_INIT+0x1d8>
	else if (__tmp > 65535)
    1aba:	6b a1       	ldd	r22, Y+35	; 0x23
    1abc:	7c a1       	ldd	r23, Y+36	; 0x24
    1abe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	4c f5       	brge	.+82     	; 0x1b24 <LCD_INIT+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e2       	ldi	r20, 0x20	; 32
    1ae0:	51 e4       	ldi	r21, 0x41	; 65
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9a a3       	std	Y+34, r25	; 0x22
    1af8:	89 a3       	std	Y+33, r24	; 0x21
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <LCD_INIT+0x1ba>
    1afc:	88 ec       	ldi	r24, 0xC8	; 200
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	98 a3       	std	Y+32, r25	; 0x20
    1b02:	8f 8f       	std	Y+31, r24	; 0x1f
    1b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b06:	98 a1       	ldd	r25, Y+32	; 0x20
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_INIT+0x1a8>
    1b0c:	98 a3       	std	Y+32, r25	; 0x20
    1b0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	89 a1       	ldd	r24, Y+33	; 0x21
    1b12:	9a a1       	ldd	r25, Y+34	; 0x22
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9a a3       	std	Y+34, r25	; 0x22
    1b18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	69 f7       	brne	.-38     	; 0x1afc <LCD_INIT+0x19c>
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <LCD_INIT+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	6b a1       	ldd	r22, Y+35	; 0x23
    1b26:	7c a1       	ldd	r23, Y+36	; 0x24
    1b28:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9a a3       	std	Y+34, r25	; 0x22
    1b36:	89 a3       	std	Y+33, r24	; 0x21
    1b38:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_INIT+0x1e4>
    1b48:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4a:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_DisplayOn );
    1b4c:	8e e0       	ldi	r24, 0x0E	; 14
    1b4e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 ea       	ldi	r26, 0xA0	; 160
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	89 8f       	std	Y+25, r24	; 0x19
    1b5c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b5e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	69 8d       	ldd	r22, Y+25	; 0x19
    1b64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a ef       	ldi	r20, 0xFA	; 250
    1b70:	54 e4       	ldi	r21, 0x44	; 68
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8d 8b       	std	Y+21, r24	; 0x15
    1b7c:	9e 8b       	std	Y+22, r25	; 0x16
    1b7e:	af 8b       	std	Y+23, r26	; 0x17
    1b80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b82:	6d 89       	ldd	r22, Y+21	; 0x15
    1b84:	7e 89       	ldd	r23, Y+22	; 0x16
    1b86:	8f 89       	ldd	r24, Y+23	; 0x17
    1b88:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <LCD_INIT+0x244>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <LCD_INIT+0x2c2>
	else if (__tmp > 65535)
    1ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    1baa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <LCD_INIT+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9c 8b       	std	Y+20, r25	; 0x14
    1be2:	8b 8b       	std	Y+19, r24	; 0x13
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <LCD_INIT+0x2a4>
    1be6:	88 ec       	ldi	r24, 0xC8	; 200
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9a 8b       	std	Y+18, r25	; 0x12
    1bec:	89 8b       	std	Y+17, r24	; 0x11
    1bee:	89 89       	ldd	r24, Y+17	; 0x11
    1bf0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_INIT+0x292>
    1bf6:	9a 8b       	std	Y+18, r25	; 0x12
    1bf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8b 89       	ldd	r24, Y+19	; 0x13
    1c06:	9c 89       	ldd	r25, Y+20	; 0x14
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <LCD_INIT+0x286>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <LCD_INIT+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9c 8b       	std	Y+20, r25	; 0x14
    1c20:	8b 8b       	std	Y+19, r24	; 0x13
    1c22:	8b 89       	ldd	r24, Y+19	; 0x13
    1c24:	9c 89       	ldd	r25, Y+20	; 0x14
    1c26:	98 8b       	std	Y+16, r25	; 0x10
    1c28:	8f 87       	std	Y+15, r24	; 0x0f
    1c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2c:	98 89       	ldd	r25, Y+16	; 0x10
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_INIT+0x2ce>
    1c32:	98 8b       	std	Y+16, r25	; 0x10
    1c34:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_Clear );
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 ea       	ldi	r26, 0xA0	; 160
    1c42:	b0 e4       	ldi	r27, 0x40	; 64
    1c44:	8b 87       	std	Y+11, r24	; 0x0b
    1c46:	9c 87       	std	Y+12, r25	; 0x0c
    1c48:	ad 87       	std	Y+13, r26	; 0x0d
    1c4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	4a ef       	ldi	r20, 0xFA	; 250
    1c5a:	54 e4       	ldi	r21, 0x44	; 68
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	8f 83       	std	Y+7, r24	; 0x07
    1c66:	98 87       	std	Y+8, r25	; 0x08
    1c68:	a9 87       	std	Y+9, r26	; 0x09
    1c6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e8       	ldi	r20, 0x80	; 128
    1c7a:	5f e3       	ldi	r21, 0x3F	; 63
    1c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <LCD_INIT+0x32e>
		__ticks = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	3f c0       	rjmp	.+126    	; 0x1d0c <LCD_INIT+0x3ac>
	else if (__tmp > 65535)
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	4c f5       	brge	.+82     	; 0x1cf8 <LCD_INIT+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e2       	ldi	r20, 0x20	; 32
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <LCD_INIT+0x38e>
    1cd0:	88 ec       	ldi	r24, 0xC8	; 200
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_INIT+0x37c>
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	69 f7       	brne	.-38     	; 0x1cd0 <LCD_INIT+0x370>
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <LCD_INIT+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfa:	78 85       	ldd	r23, Y+8	; 0x08
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_INIT+0x3b8>
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(5);
	 LCD_WRITE_COMMAND(lcd_EntryMode );
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
//	 	 _delay_ms(5);
//	 	 LCD_WRITE_COMMAND(lcd_EntryMode );

	 
#endif
 }
    1d26:	e8 96       	adiw	r28, 0x38	; 56
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <LCD_WRITE_COMMAND>:
 void LCD_WRITE_COMMAND(u8 Copy_u8command){
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	2f 97       	sbiw	r28, 0x0f	; 15
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	8f 87       	std	Y+15, r24	; 0x0f
	
#if LCD_MODE == LCD_u8_Mode_8_bit
	/* step1 : RS =0  */  // PIN0 PORTA   SET THIS VALUES IN CONFIGRATION FILE 
	
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,  RS_PIN , LOGIC_LOW);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	 
	 /* Step2 : RW =0 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,RW_PIN  , LOGIC_LOW);  // PIN1 PORTA   SET THIS VALUES IN CONFIGRATION FILE
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	
     DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);   // TO ENSURE THAT ENABLE PIN IS 0 BEFORE WE SEND DATA TO LCD 
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	62 e0       	ldi	r22, 0x02	; 2
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	
	 /* Write Command */
	 
	 DIO_u8SetPortValue(LCD_DATA_PORT , Copy_u8command) ; // SET PORT NUMBER IN CONFIGURATION FILE 
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d70:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_u8SetPortValue>
	 
	 /*  E=1 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_HIGH);
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	62 e0       	ldi	r22, 0x02	; 2
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	a0 e8       	ldi	r26, 0x80	; 128
    1d84:	bf e3       	ldi	r27, 0x3F	; 63
    1d86:	8b 87       	std	Y+11, r24	; 0x0b
    1d88:	9c 87       	std	Y+12, r25	; 0x0c
    1d8a:	ad 87       	std	Y+13, r26	; 0x0d
    1d8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4a ef       	ldi	r20, 0xFA	; 250
    1d9c:	54 e4       	ldi	r21, 0x44	; 68
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8f 83       	std	Y+7, r24	; 0x07
    1da8:	98 87       	std	Y+8, r25	; 0x08
    1daa:	a9 87       	std	Y+9, r26	; 0x09
    1dac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e8       	ldi	r20, 0x80	; 128
    1dbc:	5f e3       	ldi	r21, 0x3F	; 63
    1dbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc2:	88 23       	and	r24, r24
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <LCD_WRITE_COMMAND+0x98>
		__ticks = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <LCD_WRITE_COMMAND+0x116>
	else if (__tmp > 65535)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	4f e7       	ldi	r20, 0x7F	; 127
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	4c f5       	brge	.+82     	; 0x1e3a <LCD_WRITE_COMMAND+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e2       	ldi	r20, 0x20	; 32
    1df6:	51 e4       	ldi	r21, 0x41	; 65
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9e 83       	std	Y+6, r25	; 0x06
    1e0e:	8d 83       	std	Y+5, r24	; 0x05
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <LCD_WRITE_COMMAND+0xf8>
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9c 83       	std	Y+4, r25	; 0x04
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_WRITE_COMMAND+0xe6>
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	69 f7       	brne	.-38     	; 0x1e12 <LCD_WRITE_COMMAND+0xda>
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <LCD_WRITE_COMMAND+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3c:	78 85       	ldd	r23, Y+8	; 0x08
    1e3e:	89 85       	ldd	r24, Y+9	; 0x09
    1e40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <LCD_WRITE_COMMAND+0x122>
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(1);
	 
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	62 e0       	ldi	r22, 0x02	; 2
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
//	 /*  E=0 */
//
//	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);

	 #endif 
 }
    1e6c:	2f 96       	adiw	r28, 0x0f	; 15
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <LCD_WRITE_Char>:
 
 
 void LCD_WRITE_Char(u8 Copy_u8char){
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	2f 97       	sbiw	r28, 0x0f	; 15
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == LCD_u8_Mode_8_bit
	/* step1 : RS =1  */  // PIN0 PORTA   SET THIS VALUES IN CONFIGRATION FILE 
	
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,  RS_PIN , LOGIC_HIGH);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	 
	 /* Step2 : RW =0 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,RW_PIN  , LOGIC_LOW);  // PIN1 PORTA   SET THIS VALUES IN CONFIGRATION FILE
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	
     DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);   // TO ENSURE THAT ENABLE PIN IS 0 BEFORE WE SEND DATA TO LCD 
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	
	 /* Write Command */
	 
	 DIO_u8SetPortValue(LCD_DATA_PORT , Copy_u8char) ; // SET PORT NUMBER IN CONFIGURATION FILE
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1eb6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_u8SetPortValue>
	 
	 /*  E=1 */
	 
	DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_HIGH);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e8       	ldi	r26, 0x80	; 128
    1eca:	bf e3       	ldi	r27, 0x3F	; 63
    1ecc:	8b 87       	std	Y+11, r24	; 0x0b
    1ece:	9c 87       	std	Y+12, r25	; 0x0c
    1ed0:	ad 87       	std	Y+13, r26	; 0x0d
    1ed2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a ef       	ldi	r20, 0xFA	; 250
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	8f 83       	std	Y+7, r24	; 0x07
    1eee:	98 87       	std	Y+8, r25	; 0x08
    1ef0:	a9 87       	std	Y+9, r26	; 0x09
    1ef2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <LCD_WRITE_Char+0x98>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9e 83       	std	Y+6, r25	; 0x06
    1f12:	8d 83       	std	Y+5, r24	; 0x05
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <LCD_WRITE_Char+0x116>
	else if (__tmp > 65535)
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <LCD_WRITE_Char+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <LCD_WRITE_Char+0xf8>
    1f58:	88 ec       	ldi	r24, 0xC8	; 200
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 83       	std	Y+4, r25	; 0x04
    1f5e:	8b 83       	std	Y+3, r24	; 0x03
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_WRITE_Char+0xe6>
    1f68:	9c 83       	std	Y+4, r25	; 0x04
    1f6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <LCD_WRITE_Char+0xda>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <LCD_WRITE_Char+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	9a 83       	std	Y+2, r25	; 0x02
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_WRITE_Char+0x122>
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
 	 _delay_ms(1);
	 
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	62 e0       	ldi	r22, 0x02	; 2
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	 /*  E=0 */
	 
	 DIO_u8SetPinValue(LCD_CONTROLL_PORT ,E_PIN , LOGIC_LOW);

	 #endif 
 }
    1fb2:	2f 96       	adiw	r28, 0x0f	; 15
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <LCD_WRITE_STRING>:
 
 void LCD_WRITE_STRING(u8 *copy_string ){
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <LCD_WRITE_STRING+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <LCD_WRITE_STRING+0x8>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	9c 83       	std	Y+4, r25	; 0x04
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
	u16 i =0 ;
    1fd4:	1a 82       	std	Y+2, r1	; 0x02
    1fd6:	19 82       	std	Y+1, r1	; 0x01
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <LCD_WRITE_STRING+0x34>
	while(copy_string[i] !='\0'){
		LCD_WRITE_Char(copy_string[i]);
    1fda:	2b 81       	ldd	r18, Y+3	; 0x03
    1fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	e8 0f       	add	r30, r24
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	80 81       	ld	r24, Z
    1fea:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
		i++ ;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	 #endif 
 }
 
 void LCD_WRITE_STRING(u8 *copy_string ){
	u16 i =0 ;
	while(copy_string[i] !='\0'){
    1ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffa:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	f9 01       	movw	r30, r18
    2002:	e8 0f       	add	r30, r24
    2004:	f9 1f       	adc	r31, r25
    2006:	80 81       	ld	r24, Z
    2008:	88 23       	and	r24, r24
    200a:	39 f7       	brne	.-50     	; 0x1fda <LCD_WRITE_STRING+0x16>
		LCD_WRITE_Char(copy_string[i]);
		i++ ;

	}

 }
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <Lcd_voidDisplayNumber>:


 void Lcd_voidDisplayNumber(s32 Copy_s32Number){
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	6b 97       	sbiw	r28, 0x1b	; 27
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	68 8f       	std	Y+24, r22	; 0x18
    2030:	79 8f       	std	Y+25, r23	; 0x19
    2032:	8a 8f       	std	Y+26, r24	; 0x1a
    2034:	9b 8f       	std	Y+27, r25	; 0x1b
	 u8 arr[20];
	 u8  i =1 ;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	8b 83       	std	Y+3, r24	; 0x03
	 u8  j  ;
	 if (Copy_s32Number==0){
    203a:	88 8d       	ldd	r24, Y+24	; 0x18
    203c:	99 8d       	ldd	r25, Y+25	; 0x19
    203e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2040:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	a1 05       	cpc	r26, r1
    2046:	b1 05       	cpc	r27, r1
    2048:	21 f4       	brne	.+8      	; 0x2052 <Lcd_voidDisplayNumber+0x38>
		 LCD_WRITE_Char('0');
    204a:	80 e3       	ldi	r24, 0x30	; 48
    204c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
    2050:	4a c0       	rjmp	.+148    	; 0x20e6 <Lcd_voidDisplayNumber+0xcc>
	 }
	 else if( Copy_s32Number < 0 ){
    2052:	88 8d       	ldd	r24, Y+24	; 0x18
    2054:	99 8d       	ldd	r25, Y+25	; 0x19
    2056:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2058:	bb 8d       	ldd	r27, Y+27	; 0x1b
    205a:	bb 23       	and	r27, r27
    205c:	0c f0       	brlt	.+2      	; 0x2060 <Lcd_voidDisplayNumber+0x46>
    205e:	43 c0       	rjmp	.+134    	; 0x20e6 <Lcd_voidDisplayNumber+0xcc>
		 LCD_WRITE_Char('-');
    2060:	8d e2       	ldi	r24, 0x2D	; 45
    2062:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
	 		Copy_s32Number *= -1 ;
    2066:	88 8d       	ldd	r24, Y+24	; 0x18
    2068:	99 8d       	ldd	r25, Y+25	; 0x19
    206a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    206c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    206e:	b0 95       	com	r27
    2070:	a0 95       	com	r26
    2072:	90 95       	com	r25
    2074:	81 95       	neg	r24
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	af 4f       	sbci	r26, 0xFF	; 255
    207a:	bf 4f       	sbci	r27, 0xFF	; 255
    207c:	88 8f       	std	Y+24, r24	; 0x18
    207e:	99 8f       	std	Y+25, r25	; 0x19
    2080:	aa 8f       	std	Y+26, r26	; 0x1a
    2082:	bb 8f       	std	Y+27, r27	; 0x1b
    2084:	30 c0       	rjmp	.+96     	; 0x20e6 <Lcd_voidDisplayNumber+0xcc>
	 	}

	 while(Copy_s32Number !=0 ){
		u8 units = Copy_s32Number%10 ;
    2086:	88 8d       	ldd	r24, Y+24	; 0x18
    2088:	99 8d       	ldd	r25, Y+25	; 0x19
    208a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    208c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 22 19 	call	0x3244	; 0x3244 <__divmodsi4>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	89 83       	std	Y+1, r24	; 0x01
		arr[i]= ('0'+units);
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	48 2f       	mov	r20, r24
    20ae:	40 5d       	subi	r20, 0xD0	; 208
    20b0:	ce 01       	movw	r24, r28
    20b2:	04 96       	adiw	r24, 0x04	; 4
    20b4:	fc 01       	movw	r30, r24
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	40 83       	st	Z, r20
		Copy_s32Number /= 10 ;
    20bc:	88 8d       	ldd	r24, Y+24	; 0x18
    20be:	99 8d       	ldd	r25, Y+25	; 0x19
    20c0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20c2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20c4:	2a e0       	ldi	r18, 0x0A	; 10
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 22 19 	call	0x3244	; 0x3244 <__divmodsi4>
    20d4:	da 01       	movw	r26, r20
    20d6:	c9 01       	movw	r24, r18
    20d8:	88 8f       	std	Y+24, r24	; 0x18
    20da:	99 8f       	std	Y+25, r25	; 0x19
    20dc:	aa 8f       	std	Y+26, r26	; 0x1a
    20de:	bb 8f       	std	Y+27, r27	; 0x1b
		 i++ ;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	8b 83       	std	Y+3, r24	; 0x03
	 else if( Copy_s32Number < 0 ){
		 LCD_WRITE_Char('-');
	 		Copy_s32Number *= -1 ;
	 	}

	 while(Copy_s32Number !=0 ){
    20e6:	88 8d       	ldd	r24, Y+24	; 0x18
    20e8:	99 8d       	ldd	r25, Y+25	; 0x19
    20ea:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20ec:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	a1 05       	cpc	r26, r1
    20f2:	b1 05       	cpc	r27, r1
    20f4:	41 f6       	brne	.-112    	; 0x2086 <Lcd_voidDisplayNumber+0x6c>
		arr[i]= ('0'+units);
		Copy_s32Number /= 10 ;
		 i++ ;
	 }

	 for ( j =i-1 ; j>0 ; --j) {
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	0e c0       	rjmp	.+28     	; 0x211a <Lcd_voidDisplayNumber+0x100>
		LCD_WRITE_Char(arr[j]);
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	ce 01       	movw	r24, r28
    2106:	04 96       	adiw	r24, 0x04	; 4
    2108:	fc 01       	movw	r30, r24
    210a:	e2 0f       	add	r30, r18
    210c:	f3 1f       	adc	r31, r19
    210e:	80 81       	ld	r24, Z
    2110:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
		arr[i]= ('0'+units);
		Copy_s32Number /= 10 ;
		 i++ ;
	 }

	 for ( j =i-1 ; j>0 ; --j) {
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	81 50       	subi	r24, 0x01	; 1
    2118:	8a 83       	std	Y+2, r24	; 0x02
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	88 23       	and	r24, r24
    211e:	79 f7       	brne	.-34     	; 0x20fe <Lcd_voidDisplayNumber+0xe4>
		LCD_WRITE_Char(arr[j]);
	}

 }
    2120:	6b 96       	adiw	r28, 0x1b	; 27
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <LCD_GO_TO>:

u8 LCD_GO_TO(u8 line , u8 colummn){
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <LCD_GO_TO+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <LCD_GO_TO+0x8>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_error_state = STD_TYPES_OK;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
	
	if( colummn<=39){
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	88 32       	cpi	r24, 0x28	; 40
    214c:	d8 f4       	brcc	.+54     	; 0x2184 <LCD_GO_TO+0x52>
		
		switch(line){
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	3d 83       	std	Y+5, r19	; 0x05
    2156:	2c 83       	std	Y+4, r18	; 0x04
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	31 f0       	breq	.+12     	; 0x216c <LCD_GO_TO+0x3a>
    2160:	2c 81       	ldd	r18, Y+4	; 0x04
    2162:	3d 81       	ldd	r19, Y+5	; 0x05
    2164:	21 30       	cpi	r18, 0x01	; 1
    2166:	31 05       	cpc	r19, r1
    2168:	31 f0       	breq	.+12     	; 0x2176 <LCD_GO_TO+0x44>
    216a:	0a c0       	rjmp	.+20     	; 0x2180 <LCD_GO_TO+0x4e>
			case line1:  LCD_WRITE_COMMAND(0x80 +colummn ); break ;
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	80 58       	subi	r24, 0x80	; 128
    2170:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <LCD_GO_TO+0x54>
			
			case line2:  LCD_WRITE_COMMAND(0xc0 +colummn ); break ;
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	80 54       	subi	r24, 0x40	; 64
    217a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <LCD_GO_TO+0x54>
			default:local_error_state = STD_TYPES_NOK;
    2180:	19 82       	std	Y+1, r1	; 0x01
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <LCD_GO_TO+0x54>
			
		}
	}
	
	else{
		local_error_state = STD_TYPES_NOK;
    2184:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return  local_error_state ;
    2186:	89 81       	ldd	r24, Y+1	; 0x01
}
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <LCD_store_customchar>:

void LCD_store_customchar(u8 index,u8 *customchar){  // number of pattern  
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <LCD_store_customchar+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <LCD_store_customchar+0x8>
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	7c 83       	std	Y+4, r23	; 0x04
    21a8:	6b 83       	std	Y+3, r22	; 0x03
	if(index<8){
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	88 30       	cpi	r24, 0x08	; 8
    21ae:	18 f5       	brcc	.+70     	; 0x21f6 <LCD_store_customchar+0x5e>
		LCD_WRITE_COMMAND(CG_RAM_ADDRESS +index*8);
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	88 2f       	mov	r24, r24
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	08 96       	adiw	r24, 0x08	; 8
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
		for(u8 i=0;i<8;i++){
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	0e c0       	rjmp	.+28     	; 0x21e8 <LCD_store_customchar+0x50>
			LCD_WRITE_Char(customchar[i]);
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
}

void LCD_store_customchar(u8 index,u8 *customchar){  // number of pattern  
	if(index<8){
		LCD_WRITE_COMMAND(CG_RAM_ADDRESS +index*8);
		for(u8 i=0;i<8;i++){
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	88 30       	cpi	r24, 0x08	; 8
    21ec:	78 f3       	brcs	.-34     	; 0x21cc <LCD_store_customchar+0x34>
			LCD_WRITE_Char(customchar[i]);
		}
	    LCD_GO_TO(line1 , 1) ;	 
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
	}
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <LCD_DISPLAY_CUSTOM_CHAR>:
//***************************************************
void LCD_DISPLAY_CUSTOM_CHAR(u8 index){
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
	if(index<8){
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 30       	cpi	r24, 0x08	; 8
    2214:	18 f4       	brcc	.+6      	; 0x221c <LCD_DISPLAY_CUSTOM_CHAR+0x18>
		LCD_WRITE_Char(index);
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
	}
}
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <TIM0_INIT>:
void (* ptrctc)(void)=	NULL;


/* Start timer */

void TIM0_INIT(void){
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	
/*SELECT TIMER MODER   => normal mode */	

CLR_BIT(TIM0_TCCR0 ,TIM0_WGM00);
    222c:	a3 e5       	ldi	r26, 0x53	; 83
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e3 e5       	ldi	r30, 0x53	; 83
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8f 7b       	andi	r24, 0xBF	; 191
    2238:	8c 93       	st	X, r24
CLR_BIT(TIM0_TCCR0 ,TIM0_WGM01 );
    223a:	a3 e5       	ldi	r26, 0x53	; 83
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	87 7f       	andi	r24, 0xF7	; 247
    2246:	8c 93       	st	X, r24


/* Enable Interrupt => OVERFLOW */

SET_BIT(TIMERS_TIMSK,TOIE0);
    2248:	a9 e5       	ldi	r26, 0x59	; 89
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e9 e5       	ldi	r30, 0x59	; 89
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	81 60       	ori	r24, 0x01	; 1
    2254:	8c 93       	st	X, r24
Tick time for 0.25  = 0.25 * 256uS =  64 uS
preload value = 256 - 64 = 192    >> the intial value which  TCNT0 counting from it 
*/


TIM0_TCNT0 =  192 ;
    2256:	e2 e5       	ldi	r30, 0x52	; 82
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 ec       	ldi	r24, 0xC0	; 192
    225c:	80 83       	st	Z, r24



/* Select clk source >> CLK/8  */

SET_BIT(TIM0_TCCR0,TIM0_CS01);	
    225e:	a3 e5       	ldi	r26, 0x53	; 83
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e3 e5       	ldi	r30, 0x53	; 83
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	8c 93       	st	X, r24
CLR_BIT(TIM0_TCCR0 ,TIM0_CS02);
    226c:	a3 e5       	ldi	r26, 0x53	; 83
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e3 e5       	ldi	r30, 0x53	; 83
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	8b 7f       	andi	r24, 0xFB	; 251
    2278:	8c 93       	st	X, r24
CLR_BIT(TIM0_TCCR0 ,TIM0_CS00);
    227a:	a3 e5       	ldi	r26, 0x53	; 83
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e3 e5       	ldi	r30, 0x53	; 83
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8e 7f       	andi	r24, 0xFE	; 254
    2286:	8c 93       	st	X, r24

	
}
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <TIM1_INTI>:



void TIM1_INTI(void){
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	/* select timer1 mode =>> mode 14 */
	SET_BIT(TIM1_TCCR1A ,  1);
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	8c 93       	st	X, r24
	CLR_BIT(TIM1_TCCR1A ,  0);
    22a4:	af e4       	ldi	r26, 0x4F	; 79
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e4       	ldi	r30, 0x4F	; 79
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8e 7f       	andi	r24, 0xFE	; 254
    22b0:	8c 93       	st	X, r24
    SET_BIT(TIM1_TCCR1B ,4);
    22b2:	ae e4       	ldi	r26, 0x4E	; 78
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ee e4       	ldi	r30, 0x4E	; 78
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 61       	ori	r24, 0x10	; 16
    22be:	8c 93       	st	X, r24
    SET_BIT(TIM1_TCCR1B ,3);
    22c0:	ae e4       	ldi	r26, 0x4E	; 78
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ee e4       	ldi	r30, 0x4E	; 78
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	88 60       	ori	r24, 0x08	; 8
    22cc:	8c 93       	st	X, r24

   /* clear oc1a on compare match */
	SET_BIT(TIM1_TCCR1A ,  7);
    22ce:	af e4       	ldi	r26, 0x4F	; 79
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	ef e4       	ldi	r30, 0x4F	; 79
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 68       	ori	r24, 0x80	; 128
    22da:	8c 93       	st	X, r24
	CLR_BIT(TIM1_TCCR1A ,  6);
    22dc:	af e4       	ldi	r26, 0x4F	; 79
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	ef e4       	ldi	r30, 0x4F	; 79
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	8f 7b       	andi	r24, 0xBF	; 191
    22e8:	8c 93       	st	X, r24

	/* set top value in ICR1 REG */
	TIM1_ICR1 = 19999 ;   // period  = 20 ms
    22ea:	e6 e4       	ldi	r30, 0x46	; 70
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	8f e1       	ldi	r24, 0x1F	; 31
    22f0:	9e e4       	ldi	r25, 0x4E	; 78
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24



    /* Select clk source >> CLK/8  */

    		 SET_BIT(TIM1_TCCR1B,1);
    22f6:	ae e4       	ldi	r26, 0x4E	; 78
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	ee e4       	ldi	r30, 0x4E	; 78
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	82 60       	ori	r24, 0x02	; 2
    2302:	8c 93       	st	X, r24
    		 CLR_BIT(TIM1_TCCR1B,2);
    2304:	ae e4       	ldi	r26, 0x4E	; 78
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	ee e4       	ldi	r30, 0x4E	; 78
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8b 7f       	andi	r24, 0xFB	; 251
    2310:	8c 93       	st	X, r24
    		 CLR_BIT(TIM1_TCCR1B,0);
    2312:	ae e4       	ldi	r26, 0x4E	; 78
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	ee e4       	ldi	r30, 0x4E	; 78
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8e 7f       	andi	r24, 0xFE	; 254
    231e:	8c 93       	st	X, r24

}
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <TIM1_OCR1AVAL>:


void TIM1_OCR1AVAL(u16 val ){
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <TIM1_OCR1AVAL+0x6>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01

	/* set angle of servo */

	     TIM1_OCR1A = val;
    2334:	ea e4       	ldi	r30, 0x4A	; 74
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	80 83       	st	Z, r24
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <TIM0_SetCallBackoverflow>:

u8 TIM0_SetCallBackoverflow (void (*pf)(void)){
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <TIM0_SetCallBackoverflow+0x6>
    2350:	0f 92       	push	r0
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9b 83       	std	Y+3, r25	; 0x03
    2358:	8a 83       	std	Y+2, r24	; 0x02
	
	u8 local_u8errorstate= STD_TYPES_OK ;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01
		if(pf != NULL){
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	39 f0       	breq	.+14     	; 0x2374 <TIM0_SetCallBackoverflow+0x2a>
           ptr =  pf ;
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	9b 81       	ldd	r25, Y+3	; 0x03
    236a:	90 93 d7 00 	sts	0x00D7, r25
    236e:	80 93 d6 00 	sts	0x00D6, r24
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <TIM0_SetCallBackoverflow+0x2c>
	}
	else{
		local_u8errorstate= STD_TYPES_NOK ;
    2374:	19 82       	std	Y+1, r1	; 0x01
	}

	return local_u8errorstate;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <TIMERS_TIM0SetCompareMatchVAlue>:


void TIMERS_TIM0SetCompareMatchVAlue(u8 val){
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
	TIM0_OCR0 = val ;
    2390:	ec e5       	ldi	r30, 0x5C	; 92
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	80 83       	st	Z, r24

}
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <TIM0_SetCallBackctc>:

u8 TIM0_SetCallBackctc (void (*pf)(void)) {
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <TIM0_SetCallBackctc+0x6>
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9b 83       	std	Y+3, r25	; 0x03
    23ae:	8a 83       	std	Y+2, r24	; 0x02


u8 local_u8errorstate= STD_TYPES_OK ;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	89 83       	std	Y+1, r24	; 0x01
	if(pf != NULL){
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	39 f0       	breq	.+14     	; 0x23ca <TIM0_SetCallBackctc+0x2a>
       ptrctc  =  pf ;
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	90 93 d9 00 	sts	0x00D9, r25
    23c4:	80 93 d8 00 	sts	0x00D8, r24
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <TIM0_SetCallBackctc+0x2c>
}
else{
	local_u8errorstate= STD_TYPES_NOK ;
    23ca:	19 82       	std	Y+1, r1	; 0x01
}

return local_u8errorstate;
    23cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <__vector_11>:

/* ISR for TIM0 overflow */

void __vector_11(void) __attribute__((signal));

void __vector_11(void){
    23da:	1f 92       	push	r1
    23dc:	0f 92       	push	r0
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	0f 92       	push	r0
    23e2:	11 24       	eor	r1, r1
    23e4:	2f 93       	push	r18
    23e6:	3f 93       	push	r19
    23e8:	4f 93       	push	r20
    23ea:	5f 93       	push	r21
    23ec:	6f 93       	push	r22
    23ee:	7f 93       	push	r23
    23f0:	8f 93       	push	r24
    23f2:	9f 93       	push	r25
    23f4:	af 93       	push	r26
    23f6:	bf 93       	push	r27
    23f8:	ef 93       	push	r30
    23fa:	ff 93       	push	r31
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	
static u16 counter_overflow =0 ;
counter_overflow++;
    2404:	80 91 da 00 	lds	r24, 0x00DA
    2408:	90 91 db 00 	lds	r25, 0x00DB
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	90 93 db 00 	sts	0x00DB, r25
    2412:	80 93 da 00 	sts	0x00DA, r24
if(counter_overflow == 3907 ){
    2416:	80 91 da 00 	lds	r24, 0x00DA
    241a:	90 91 db 00 	lds	r25, 0x00DB
    241e:	2f e0       	ldi	r18, 0x0F	; 15
    2420:	83 34       	cpi	r24, 0x43	; 67
    2422:	92 07       	cpc	r25, r18
    2424:	99 f4       	brne	.+38     	; 0x244c <__vector_11+0x72>
	
	/* Update preload value */
	TIM0_TCNT0 =  192 ;
    2426:	e2 e5       	ldi	r30, 0x52	; 82
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 ec       	ldi	r24, 0xC0	; 192
    242c:	80 83       	st	Z, r24
	/* clear counter_overflow */
	counter_overflow=0;
    242e:	10 92 db 00 	sts	0x00DB, r1
    2432:	10 92 da 00 	sts	0x00DA, r1
	if(ptr != NULL){
    2436:	80 91 d6 00 	lds	r24, 0x00D6
    243a:	90 91 d7 00 	lds	r25, 0x00D7
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	29 f0       	breq	.+10     	; 0x244c <__vector_11+0x72>
	/* call APP Function */
	ptr();
    2442:	e0 91 d6 00 	lds	r30, 0x00D6
    2446:	f0 91 d7 00 	lds	r31, 0x00D7
    244a:	09 95       	icall
	}
	
}	
	
	
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	ff 91       	pop	r31
    2452:	ef 91       	pop	r30
    2454:	bf 91       	pop	r27
    2456:	af 91       	pop	r26
    2458:	9f 91       	pop	r25
    245a:	8f 91       	pop	r24
    245c:	7f 91       	pop	r23
    245e:	6f 91       	pop	r22
    2460:	5f 91       	pop	r21
    2462:	4f 91       	pop	r20
    2464:	3f 91       	pop	r19
    2466:	2f 91       	pop	r18
    2468:	0f 90       	pop	r0
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	0f 90       	pop	r0
    246e:	1f 90       	pop	r1
    2470:	18 95       	reti

00002472 <__vector_10>:
/* ISR for TIM0 ctc*/


void __vector_10(void) __attribute__((signal));

void __vector_10(void){
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	2f 93       	push	r18
    247e:	3f 93       	push	r19
    2480:	4f 93       	push	r20
    2482:	5f 93       	push	r21
    2484:	6f 93       	push	r22
    2486:	7f 93       	push	r23
    2488:	8f 93       	push	r24
    248a:	9f 93       	push	r25
    248c:	af 93       	push	r26
    248e:	bf 93       	push	r27
    2490:	ef 93       	push	r30
    2492:	ff 93       	push	r31
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62

static u16 counter_ctc =0 ;
counter_ctc++;
    249c:	80 91 dc 00 	lds	r24, 0x00DC
    24a0:	90 91 dd 00 	lds	r25, 0x00DD
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	90 93 dd 00 	sts	0x00DD, r25
    24aa:	80 93 dc 00 	sts	0x00DC, r24
if(counter_ctc == 10000 ){
    24ae:	80 91 dc 00 	lds	r24, 0x00DC
    24b2:	90 91 dd 00 	lds	r25, 0x00DD
    24b6:	27 e2       	ldi	r18, 0x27	; 39
    24b8:	80 31       	cpi	r24, 0x10	; 16
    24ba:	92 07       	cpc	r25, r18
    24bc:	79 f4       	brne	.+30     	; 0x24dc <__vector_10+0x6a>
	/* clear counte*/
	counter_ctc=0;
    24be:	10 92 dd 00 	sts	0x00DD, r1
    24c2:	10 92 dc 00 	sts	0x00DC, r1
	if(ptrctc != NULL){
    24c6:	80 91 d8 00 	lds	r24, 0x00D8
    24ca:	90 91 d9 00 	lds	r25, 0x00D9
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	29 f0       	breq	.+10     	; 0x24dc <__vector_10+0x6a>
	/* call APP Function */
		ptrctc();
    24d2:	e0 91 d8 00 	lds	r30, 0x00D8
    24d6:	f0 91 d9 00 	lds	r31, 0x00D9
    24da:	09 95       	icall
	}

}


}
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	ff 91       	pop	r31
    24e2:	ef 91       	pop	r30
    24e4:	bf 91       	pop	r27
    24e6:	af 91       	pop	r26
    24e8:	9f 91       	pop	r25
    24ea:	8f 91       	pop	r24
    24ec:	7f 91       	pop	r23
    24ee:	6f 91       	pop	r22
    24f0:	5f 91       	pop	r21
    24f2:	4f 91       	pop	r20
    24f4:	3f 91       	pop	r19
    24f6:	2f 91       	pop	r18
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <set_time>:
u8 stop_flag =0 ;
void time(void);



void set_time(void){
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <set_time+0x6>
    2508:	0f 92       	push	r0
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	s8 value ;
	LCD_WRITE_STRING(" 00:00:00  AM");
    250e:	80 e6       	ldi	r24, 0x60	; 96
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>

 while(1){
	 do{ KPD_u8KpdGetKeyState(&pinvalue);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
		 }while(pinvalue ==  Kpd_keynotpressed);
    251e:	80 91 00 01 	lds	r24, 0x0100
    2522:	8f 3f       	cpi	r24, 0xFF	; 255
    2524:	c1 f3       	breq	.-16     	; 0x2516 <set_time+0x14>

	 if(value ==9){
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	89 30       	cpi	r24, 0x09	; 9
    252a:	21 f4       	brne	.+8      	; 0x2534 <set_time+0x32>
	 		flagr =1 ;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 e1 00 	sts	0x00E1, r24
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <set_time+0x36>
	 	}
	 else{
		 flagr =0;
    2534:	10 92 e1 00 	sts	0x00E1, r1
	 }

	if(pinvalue=='r' && flagr ==0 ){
    2538:	80 91 00 01 	lds	r24, 0x0100
    253c:	82 37       	cpi	r24, 0x72	; 114
    253e:	69 f4       	brne	.+26     	; 0x255a <set_time+0x58>
    2540:	80 91 e1 00 	lds	r24, 0x00E1
    2544:	88 23       	and	r24, r24
    2546:	49 f4       	brne	.+18     	; 0x255a <set_time+0x58>
		countr++;
    2548:	80 91 df 00 	lds	r24, 0x00DF
    254c:	8f 5f       	subi	r24, 0xFF	; 255
    254e:	80 93 df 00 	sts	0x00DF, r24
		flagl=1 ;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 93 e2 00 	sts	0x00E2, r24
    2558:	0d c0       	rjmp	.+26     	; 0x2574 <set_time+0x72>
	}
	else if(pinvalue=='l' && flagl ==1){
    255a:	80 91 00 01 	lds	r24, 0x0100
    255e:	8c 36       	cpi	r24, 0x6C	; 108
    2560:	49 f4       	brne	.+18     	; 0x2574 <set_time+0x72>
    2562:	80 91 e2 00 	lds	r24, 0x00E2
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	29 f4       	brne	.+10     	; 0x2574 <set_time+0x72>
		countl++;
    256a:	80 91 e0 00 	lds	r24, 0x00E0
    256e:	8f 5f       	subi	r24, 0xFF	; 255
    2570:	80 93 e0 00 	sts	0x00E0, r24

	}
	if( countl ==3 || countl ==6){
    2574:	80 91 e0 00 	lds	r24, 0x00E0
    2578:	83 30       	cpi	r24, 0x03	; 3
    257a:	21 f0       	breq	.+8      	; 0x2584 <set_time+0x82>
    257c:	80 91 e0 00 	lds	r24, 0x00E0
    2580:	86 30       	cpi	r24, 0x06	; 6
    2582:	29 f4       	brne	.+10     	; 0x258e <set_time+0x8c>
		countl++;
    2584:	80 91 e0 00 	lds	r24, 0x00E0
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	80 93 e0 00 	sts	0x00E0, r24
	}
	if( countr ==2 || countr ==5){
    258e:	80 91 df 00 	lds	r24, 0x00DF
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	21 f0       	breq	.+8      	; 0x259e <set_time+0x9c>
    2596:	80 91 df 00 	lds	r24, 0x00DF
    259a:	85 30       	cpi	r24, 0x05	; 5
    259c:	29 f4       	brne	.+10     	; 0x25a8 <set_time+0xa6>
			countr++;
    259e:	80 91 df 00 	lds	r24, 0x00DF
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	80 93 df 00 	sts	0x00DF, r24
		}

	value = countl - countr;
    25a8:	90 91 e0 00 	lds	r25, 0x00E0
    25ac:	80 91 df 00 	lds	r24, 0x00DF
    25b0:	29 2f       	mov	r18, r25
    25b2:	28 1b       	sub	r18, r24
    25b4:	82 2f       	mov	r24, r18
    25b6:	89 83       	std	Y+1, r24	; 0x01
	if(value <0){
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	88 23       	and	r24, r24
    25bc:	1c f4       	brge	.+6      	; 0x25c4 <set_time+0xc2>
		value*=-1 ;
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	81 95       	neg	r24
    25c2:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_GO_TO(line1 , value);
    25c4:	99 81       	ldd	r25, Y+1	; 0x01
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	69 2f       	mov	r22, r25
    25ca:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
  sign_1 = pinvalue -'0';
    25ce:	80 91 00 01 	lds	r24, 0x0100
    25d2:	80 53       	subi	r24, 0x30	; 48
    25d4:	80 93 03 01 	sts	0x0103, r24
   if(sign_1 >=0 && sign_1<=9 ){
    25d8:	80 91 03 01 	lds	r24, 0x0103
    25dc:	8a 30       	cpi	r24, 0x0A	; 10
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <set_time+0xe0>
    25e0:	cb c0       	rjmp	.+406    	; 0x2778 <set_time+0x276>
   num_1 = (num_1*10) + (pinvalue -'0');
    25e2:	80 91 de 00 	lds	r24, 0x00DE
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9c 01       	movw	r18, r24
    25ec:	22 0f       	add	r18, r18
    25ee:	33 1f       	adc	r19, r19
    25f0:	c9 01       	movw	r24, r18
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	98 2f       	mov	r25, r24
    2600:	80 91 00 01 	lds	r24, 0x0100
    2604:	89 0f       	add	r24, r25
    2606:	80 53       	subi	r24, 0x30	; 48
    2608:	80 93 de 00 	sts	0x00DE, r24
   LCD_GO_TO(line1 , value);
    260c:	99 81       	ldd	r25, Y+1	; 0x01
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	69 2f       	mov	r22, r25
    2612:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   Lcd_voidDisplayNumber(num_1);
    2616:	80 91 de 00 	lds	r24, 0x00DE
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	a0 e0       	ldi	r26, 0x00	; 0
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
  		switch(value){
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	33 27       	eor	r19, r19
    2630:	27 fd       	sbrc	r18, 7
    2632:	30 95       	com	r19
    2634:	3b 83       	std	Y+3, r19	; 0x03
    2636:	2a 83       	std	Y+2, r18	; 0x02
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	84 30       	cpi	r24, 0x04	; 4
    263e:	91 05       	cpc	r25, r1
    2640:	09 f4       	brne	.+2      	; 0x2644 <set_time+0x142>
    2642:	4b c0       	rjmp	.+150    	; 0x26da <set_time+0x1d8>
    2644:	2a 81       	ldd	r18, Y+2	; 0x02
    2646:	3b 81       	ldd	r19, Y+3	; 0x03
    2648:	25 30       	cpi	r18, 0x05	; 5
    264a:	31 05       	cpc	r19, r1
    264c:	5c f4       	brge	.+22     	; 0x2664 <set_time+0x162>
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	9b 81       	ldd	r25, Y+3	; 0x03
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	91 05       	cpc	r25, r1
    2656:	c9 f0       	breq	.+50     	; 0x268a <set_time+0x188>
    2658:	2a 81       	ldd	r18, Y+2	; 0x02
    265a:	3b 81       	ldd	r19, Y+3	; 0x03
    265c:	22 30       	cpi	r18, 0x02	; 2
    265e:	31 05       	cpc	r19, r1
    2660:	71 f1       	breq	.+92     	; 0x26be <set_time+0x1bc>
    2662:	8a c0       	rjmp	.+276    	; 0x2778 <set_time+0x276>
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	87 30       	cpi	r24, 0x07	; 7
    266a:	91 05       	cpc	r25, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <set_time+0x16e>
    266e:	5d c0       	rjmp	.+186    	; 0x272a <set_time+0x228>
    2670:	2a 81       	ldd	r18, Y+2	; 0x02
    2672:	3b 81       	ldd	r19, Y+3	; 0x03
    2674:	28 30       	cpi	r18, 0x08	; 8
    2676:	31 05       	cpc	r19, r1
    2678:	09 f4       	brne	.+2      	; 0x267c <set_time+0x17a>
    267a:	71 c0       	rjmp	.+226    	; 0x275e <set_time+0x25c>
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	85 30       	cpi	r24, 0x05	; 5
    2682:	91 05       	cpc	r25, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <set_time+0x186>
    2686:	43 c0       	rjmp	.+134    	; 0x270e <set_time+0x20c>
    2688:	77 c0       	rjmp	.+238    	; 0x2778 <set_time+0x276>
	 		case 1:

	 			hour_tens=num_1*10 ;
    268a:	80 91 de 00 	lds	r24, 0x00DE
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 01       	movw	r18, r24
    2694:	22 0f       	add	r18, r18
    2696:	33 1f       	adc	r19, r19
    2698:	c9 01       	movw	r24, r18
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	82 0f       	add	r24, r18
    26a4:	93 1f       	adc	r25, r19
    26a6:	80 93 e7 00 	sts	0x00E7, r24
	 			hours=hour_tens+hour_units;
    26aa:	90 91 e7 00 	lds	r25, 0x00E7
    26ae:	80 91 e8 00 	lds	r24, 0x00E8
    26b2:	89 0f       	add	r24, r25
    26b4:	80 93 ea 00 	sts	0x00EA, r24
	 			num_1 =0 ;
    26b8:	10 92 de 00 	sts	0x00DE, r1
    26bc:	5d c0       	rjmp	.+186    	; 0x2778 <set_time+0x276>
	 			break ;

	 		case 2:
	 			hour_units=num_1 ;
    26be:	80 91 de 00 	lds	r24, 0x00DE
    26c2:	80 93 e8 00 	sts	0x00E8, r24
	 			hours=hour_tens+hour_units;
    26c6:	90 91 e7 00 	lds	r25, 0x00E7
    26ca:	80 91 e8 00 	lds	r24, 0x00E8
    26ce:	89 0f       	add	r24, r25
    26d0:	80 93 ea 00 	sts	0x00EA, r24
	 			num_1 =0;
    26d4:	10 92 de 00 	sts	0x00DE, r1
    26d8:	4f c0       	rjmp	.+158    	; 0x2778 <set_time+0x276>
	 		    break ;
	 		case 4:
	 			minuts_tens=num_1*10 ;
    26da:	80 91 de 00 	lds	r24, 0x00DE
    26de:	88 2f       	mov	r24, r24
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9c 01       	movw	r18, r24
    26e4:	22 0f       	add	r18, r18
    26e6:	33 1f       	adc	r19, r19
    26e8:	c9 01       	movw	r24, r18
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	80 93 e3 00 	sts	0x00E3, r24
	 			minuts=minuts_tens+minuts_units;
    26fa:	90 91 e3 00 	lds	r25, 0x00E3
    26fe:	80 91 e4 00 	lds	r24, 0x00E4
    2702:	89 0f       	add	r24, r25
    2704:	80 93 e9 00 	sts	0x00E9, r24
	 			num_1=0;
    2708:	10 92 de 00 	sts	0x00DE, r1
    270c:	35 c0       	rjmp	.+106    	; 0x2778 <set_time+0x276>
	 		    break ;
	 		case 5:
	 			minuts_units=num_1 ;
    270e:	80 91 de 00 	lds	r24, 0x00DE
    2712:	80 93 e4 00 	sts	0x00E4, r24
	 			minuts=minuts_tens+minuts_units;
    2716:	90 91 e3 00 	lds	r25, 0x00E3
    271a:	80 91 e4 00 	lds	r24, 0x00E4
    271e:	89 0f       	add	r24, r25
    2720:	80 93 e9 00 	sts	0x00E9, r24
	 			num_1=0;
    2724:	10 92 de 00 	sts	0x00DE, r1
    2728:	27 c0       	rjmp	.+78     	; 0x2778 <set_time+0x276>
	 			break ;
	 		case 7:
	 			second_tens = num_1*10 ;
    272a:	80 91 de 00 	lds	r24, 0x00DE
    272e:	88 2f       	mov	r24, r24
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9c 01       	movw	r18, r24
    2734:	22 0f       	add	r18, r18
    2736:	33 1f       	adc	r19, r19
    2738:	c9 01       	movw	r24, r18
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	82 0f       	add	r24, r18
    2744:	93 1f       	adc	r25, r19
    2746:	80 93 e5 00 	sts	0x00E5, r24
	 			seconds = second_tens+second_units;
    274a:	90 91 e5 00 	lds	r25, 0x00E5
    274e:	80 91 e6 00 	lds	r24, 0x00E6
    2752:	89 0f       	add	r24, r25
    2754:	80 93 eb 00 	sts	0x00EB, r24
	 			num_1=0;
    2758:	10 92 de 00 	sts	0x00DE, r1
    275c:	0d c0       	rjmp	.+26     	; 0x2778 <set_time+0x276>
	             break ;
	 		case 8:
	 			second_units = num_1;
    275e:	80 91 de 00 	lds	r24, 0x00DE
    2762:	80 93 e6 00 	sts	0x00E6, r24
	 			seconds = second_tens+second_units;
    2766:	90 91 e5 00 	lds	r25, 0x00E5
    276a:	80 91 e6 00 	lds	r24, 0x00E6
    276e:	89 0f       	add	r24, r25
    2770:	80 93 eb 00 	sts	0x00EB, r24
	 			num_1=0;
    2774:	10 92 de 00 	sts	0x00DE, r1
	 			break ;


	  }}
		if(pinvalue=='e'){
    2778:	80 91 00 01 	lds	r24, 0x0100
    277c:	85 36       	cpi	r24, 0x65	; 101
    277e:	09 f0       	breq	.+2      	; 0x2782 <set_time+0x280>
    2780:	ca ce       	rjmp	.-620    	; 0x2516 <set_time+0x14>
			break ;
		}
			  }


}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <alarm>:


void alarm(void){
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <alarm+0x6>
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
	s8 value ;
	LCD_GO_TO(line2, 0);
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		LCD_WRITE_STRING(" 00:00:00  AM");
    27a2:	80 e6       	ldi	r24, 0x60	; 96
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>

	 while(1){
		 do{ KPD_u8KpdGetKeyState(&pinvalue);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
			 }while(pinvalue ==  Kpd_keynotpressed);
    27b2:	80 91 00 01 	lds	r24, 0x0100
    27b6:	8f 3f       	cpi	r24, 0xFF	; 255
    27b8:	c1 f3       	breq	.-16     	; 0x27aa <alarm+0x1c>

		 if(value ==9){
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	89 30       	cpi	r24, 0x09	; 9
    27be:	21 f4       	brne	.+8      	; 0x27c8 <alarm+0x3a>
		 		flagr_alarm =1 ;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	80 93 ee 00 	sts	0x00EE, r24
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <alarm+0x3e>
		 	}
		 else{
			 flagr_alarm =0;
    27c8:	10 92 ee 00 	sts	0x00EE, r1
		 }

		if(pinvalue=='r' && flagr_alarm ==0 ){
    27cc:	80 91 00 01 	lds	r24, 0x0100
    27d0:	82 37       	cpi	r24, 0x72	; 114
    27d2:	69 f4       	brne	.+26     	; 0x27ee <alarm+0x60>
    27d4:	80 91 ee 00 	lds	r24, 0x00EE
    27d8:	88 23       	and	r24, r24
    27da:	49 f4       	brne	.+18     	; 0x27ee <alarm+0x60>
			countr_alarm++;
    27dc:	80 91 ec 00 	lds	r24, 0x00EC
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	80 93 ec 00 	sts	0x00EC, r24
			flagl_alarm=1 ;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	80 93 ef 00 	sts	0x00EF, r24
    27ec:	0d c0       	rjmp	.+26     	; 0x2808 <alarm+0x7a>
		}
		else if(pinvalue=='l' && flagl_alarm ==1){
    27ee:	80 91 00 01 	lds	r24, 0x0100
    27f2:	8c 36       	cpi	r24, 0x6C	; 108
    27f4:	49 f4       	brne	.+18     	; 0x2808 <alarm+0x7a>
    27f6:	80 91 ef 00 	lds	r24, 0x00EF
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	29 f4       	brne	.+10     	; 0x2808 <alarm+0x7a>
			countl_alarm++;
    27fe:	80 91 ed 00 	lds	r24, 0x00ED
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	80 93 ed 00 	sts	0x00ED, r24

		}
		if( countl_alarm ==3 || countl_alarm ==6){
    2808:	80 91 ed 00 	lds	r24, 0x00ED
    280c:	83 30       	cpi	r24, 0x03	; 3
    280e:	21 f0       	breq	.+8      	; 0x2818 <alarm+0x8a>
    2810:	80 91 ed 00 	lds	r24, 0x00ED
    2814:	86 30       	cpi	r24, 0x06	; 6
    2816:	29 f4       	brne	.+10     	; 0x2822 <alarm+0x94>
			countl_alarm++;
    2818:	80 91 ed 00 	lds	r24, 0x00ED
    281c:	8f 5f       	subi	r24, 0xFF	; 255
    281e:	80 93 ed 00 	sts	0x00ED, r24
		}
		if( countr_alarm ==2 || countr_alarm ==5){
    2822:	80 91 ec 00 	lds	r24, 0x00EC
    2826:	82 30       	cpi	r24, 0x02	; 2
    2828:	21 f0       	breq	.+8      	; 0x2832 <alarm+0xa4>
    282a:	80 91 ec 00 	lds	r24, 0x00EC
    282e:	85 30       	cpi	r24, 0x05	; 5
    2830:	29 f4       	brne	.+10     	; 0x283c <alarm+0xae>
				countr_alarm++;
    2832:	80 91 ec 00 	lds	r24, 0x00EC
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	80 93 ec 00 	sts	0x00EC, r24
			}

		value = countl_alarm - countr_alarm;
    283c:	90 91 ed 00 	lds	r25, 0x00ED
    2840:	80 91 ec 00 	lds	r24, 0x00EC
    2844:	29 2f       	mov	r18, r25
    2846:	28 1b       	sub	r18, r24
    2848:	82 2f       	mov	r24, r18
    284a:	89 83       	std	Y+1, r24	; 0x01
		if(value <0){
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	88 23       	and	r24, r24
    2850:	1c f4       	brge	.+6      	; 0x2858 <alarm+0xca>
			value*=-1 ;
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	81 95       	neg	r24
    2856:	89 83       	std	Y+1, r24	; 0x01
		}
		LCD_GO_TO(line2 , value);
    2858:	99 81       	ldd	r25, Y+1	; 0x01
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	69 2f       	mov	r22, r25
    285e:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
	  sign_1 = pinvalue -'0';
    2862:	80 91 00 01 	lds	r24, 0x0100
    2866:	80 53       	subi	r24, 0x30	; 48
    2868:	80 93 03 01 	sts	0x0103, r24
	   if(sign_1 >=0 && sign_1<=9 ){
    286c:	80 91 03 01 	lds	r24, 0x0103
    2870:	8a 30       	cpi	r24, 0x0A	; 10
    2872:	08 f0       	brcs	.+2      	; 0x2876 <alarm+0xe8>
    2874:	cb c0       	rjmp	.+406    	; 0x2a0c <alarm+0x27e>
	   num_1 = (num_1*10) + (pinvalue -'0');
    2876:	80 91 de 00 	lds	r24, 0x00DE
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9c 01       	movw	r18, r24
    2880:	22 0f       	add	r18, r18
    2882:	33 1f       	adc	r19, r19
    2884:	c9 01       	movw	r24, r18
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	82 0f       	add	r24, r18
    2890:	93 1f       	adc	r25, r19
    2892:	98 2f       	mov	r25, r24
    2894:	80 91 00 01 	lds	r24, 0x0100
    2898:	89 0f       	add	r24, r25
    289a:	80 53       	subi	r24, 0x30	; 48
    289c:	80 93 de 00 	sts	0x00DE, r24
	   LCD_GO_TO(line2 , value);
    28a0:	99 81       	ldd	r25, Y+1	; 0x01
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	69 2f       	mov	r22, r25
    28a6:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
	   Lcd_voidDisplayNumber(num_1);
    28aa:	80 91 de 00 	lds	r24, 0x00DE
    28ae:	88 2f       	mov	r24, r24
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a0 e0       	ldi	r26, 0x00	; 0
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
	  		switch(value){
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	28 2f       	mov	r18, r24
    28c2:	33 27       	eor	r19, r19
    28c4:	27 fd       	sbrc	r18, 7
    28c6:	30 95       	com	r19
    28c8:	3b 83       	std	Y+3, r19	; 0x03
    28ca:	2a 83       	std	Y+2, r18	; 0x02
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	9b 81       	ldd	r25, Y+3	; 0x03
    28d0:	84 30       	cpi	r24, 0x04	; 4
    28d2:	91 05       	cpc	r25, r1
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <alarm+0x14a>
    28d6:	4b c0       	rjmp	.+150    	; 0x296e <alarm+0x1e0>
    28d8:	2a 81       	ldd	r18, Y+2	; 0x02
    28da:	3b 81       	ldd	r19, Y+3	; 0x03
    28dc:	25 30       	cpi	r18, 0x05	; 5
    28de:	31 05       	cpc	r19, r1
    28e0:	5c f4       	brge	.+22     	; 0x28f8 <alarm+0x16a>
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	81 30       	cpi	r24, 0x01	; 1
    28e8:	91 05       	cpc	r25, r1
    28ea:	c9 f0       	breq	.+50     	; 0x291e <alarm+0x190>
    28ec:	2a 81       	ldd	r18, Y+2	; 0x02
    28ee:	3b 81       	ldd	r19, Y+3	; 0x03
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	71 f1       	breq	.+92     	; 0x2952 <alarm+0x1c4>
    28f6:	8a c0       	rjmp	.+276    	; 0x2a0c <alarm+0x27e>
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	9b 81       	ldd	r25, Y+3	; 0x03
    28fc:	87 30       	cpi	r24, 0x07	; 7
    28fe:	91 05       	cpc	r25, r1
    2900:	09 f4       	brne	.+2      	; 0x2904 <alarm+0x176>
    2902:	5d c0       	rjmp	.+186    	; 0x29be <alarm+0x230>
    2904:	2a 81       	ldd	r18, Y+2	; 0x02
    2906:	3b 81       	ldd	r19, Y+3	; 0x03
    2908:	28 30       	cpi	r18, 0x08	; 8
    290a:	31 05       	cpc	r19, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <alarm+0x182>
    290e:	71 c0       	rjmp	.+226    	; 0x29f2 <alarm+0x264>
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	9b 81       	ldd	r25, Y+3	; 0x03
    2914:	85 30       	cpi	r24, 0x05	; 5
    2916:	91 05       	cpc	r25, r1
    2918:	09 f4       	brne	.+2      	; 0x291c <alarm+0x18e>
    291a:	43 c0       	rjmp	.+134    	; 0x29a2 <alarm+0x214>
    291c:	77 c0       	rjmp	.+238    	; 0x2a0c <alarm+0x27e>
		 		case 1:

		 			hour_tens_alarm=num_1*10 ;
    291e:	80 91 de 00 	lds	r24, 0x00DE
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9c 01       	movw	r18, r24
    2928:	22 0f       	add	r18, r18
    292a:	33 1f       	adc	r19, r19
    292c:	c9 01       	movw	r24, r18
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	80 93 f4 00 	sts	0x00F4, r24
		 			hours_Alarm=hour_tens_alarm+hour_units_alarm;
    293e:	90 91 f4 00 	lds	r25, 0x00F4
    2942:	80 91 f5 00 	lds	r24, 0x00F5
    2946:	89 0f       	add	r24, r25
    2948:	80 93 f7 00 	sts	0x00F7, r24
		 			num_1 =0 ;
    294c:	10 92 de 00 	sts	0x00DE, r1
    2950:	5d c0       	rjmp	.+186    	; 0x2a0c <alarm+0x27e>
		 			break ;

		 		case 2:
		 			hour_units_alarm=num_1 ;
    2952:	80 91 de 00 	lds	r24, 0x00DE
    2956:	80 93 f5 00 	sts	0x00F5, r24
		 			hours_Alarm=hour_tens_alarm+hour_units_alarm;
    295a:	90 91 f4 00 	lds	r25, 0x00F4
    295e:	80 91 f5 00 	lds	r24, 0x00F5
    2962:	89 0f       	add	r24, r25
    2964:	80 93 f7 00 	sts	0x00F7, r24
		 			num_1 =0;
    2968:	10 92 de 00 	sts	0x00DE, r1
    296c:	4f c0       	rjmp	.+158    	; 0x2a0c <alarm+0x27e>
		 		    break ;
		 		case 4:
		 			minuts_tens_alarm=num_1*10 ;
    296e:	80 91 de 00 	lds	r24, 0x00DE
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9c 01       	movw	r18, r24
    2978:	22 0f       	add	r18, r18
    297a:	33 1f       	adc	r19, r19
    297c:	c9 01       	movw	r24, r18
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	82 0f       	add	r24, r18
    2988:	93 1f       	adc	r25, r19
    298a:	80 93 f0 00 	sts	0x00F0, r24
		 			minuts_alarm=minuts_tens_alarm+minuts_units_alarm;
    298e:	90 91 f0 00 	lds	r25, 0x00F0
    2992:	80 91 f1 00 	lds	r24, 0x00F1
    2996:	89 0f       	add	r24, r25
    2998:	80 93 f6 00 	sts	0x00F6, r24
		 			num_1=0;
    299c:	10 92 de 00 	sts	0x00DE, r1
    29a0:	35 c0       	rjmp	.+106    	; 0x2a0c <alarm+0x27e>
		 		    break ;
		 		case 5:
		 			minuts_units_alarm=num_1 ;
    29a2:	80 91 de 00 	lds	r24, 0x00DE
    29a6:	80 93 f1 00 	sts	0x00F1, r24
		 			minuts_alarm=minuts_tens_alarm+minuts_units_alarm;
    29aa:	90 91 f0 00 	lds	r25, 0x00F0
    29ae:	80 91 f1 00 	lds	r24, 0x00F1
    29b2:	89 0f       	add	r24, r25
    29b4:	80 93 f6 00 	sts	0x00F6, r24
		 			num_1=0;
    29b8:	10 92 de 00 	sts	0x00DE, r1
    29bc:	27 c0       	rjmp	.+78     	; 0x2a0c <alarm+0x27e>
		 			break ;
		 		case 7:
		 			second_tens_alarm = num_1*10 ;
    29be:	80 91 de 00 	lds	r24, 0x00DE
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	9c 01       	movw	r18, r24
    29c8:	22 0f       	add	r18, r18
    29ca:	33 1f       	adc	r19, r19
    29cc:	c9 01       	movw	r24, r18
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	82 0f       	add	r24, r18
    29d8:	93 1f       	adc	r25, r19
    29da:	80 93 f2 00 	sts	0x00F2, r24
		 			secondsalarm = second_tens_alarm+second_units_alarm;
    29de:	90 91 f2 00 	lds	r25, 0x00F2
    29e2:	80 91 f3 00 	lds	r24, 0x00F3
    29e6:	89 0f       	add	r24, r25
    29e8:	80 93 f8 00 	sts	0x00F8, r24
		 			num_1=0;
    29ec:	10 92 de 00 	sts	0x00DE, r1
    29f0:	0d c0       	rjmp	.+26     	; 0x2a0c <alarm+0x27e>
		             break ;
		 		case 8:
		 			second_units_alarm = num_1;
    29f2:	80 91 de 00 	lds	r24, 0x00DE
    29f6:	80 93 f3 00 	sts	0x00F3, r24
		 			secondsalarm = second_tens_alarm+second_units_alarm;
    29fa:	90 91 f2 00 	lds	r25, 0x00F2
    29fe:	80 91 f3 00 	lds	r24, 0x00F3
    2a02:	89 0f       	add	r24, r25
    2a04:	80 93 f8 00 	sts	0x00F8, r24
		 			num_1=0;
    2a08:	10 92 de 00 	sts	0x00DE, r1
		 			break ;


		  }}
			if(pinvalue=='e'){
    2a0c:	80 91 00 01 	lds	r24, 0x0100
    2a10:	85 36       	cpi	r24, 0x65	; 101
    2a12:	09 f0       	breq	.+2      	; 0x2a16 <alarm+0x288>
    2a14:	ca ce       	rjmp	.-620    	; 0x27aa <alarm+0x1c>
			}
				  }



}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <stop_watch>:


void stop_watch(void){
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(lcd_Clear);
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
	LCD_GO_TO(line2,0);
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
	LCD_WRITE_STRING(" 00:00:00");
    2a38:	8e e6       	ldi	r24, 0x6E	; 110
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
	 do{ KPD_u8KpdGetKeyState(&pinvalue);
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
		}while(pinvalue ==  Kpd_keynotpressed);
    2a48:	80 91 00 01 	lds	r24, 0x0100
    2a4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a4e:	c1 f3       	breq	.-16     	; 0x2a40 <stop_watch+0x1e>

	 if(pinvalue=='e'){
    2a50:	80 91 00 01 	lds	r24, 0x0100
    2a54:	85 36       	cpi	r24, 0x65	; 101
    2a56:	19 f4       	brne	.+6      	; 0x2a5e <stop_watch+0x3c>
          stop_flag=1;
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	80 93 fe 00 	sts	0x00FE, r24

	 }
}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <main>:

void alarm_dis(void);
int main(){
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <main+0x6>
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInit();
    2a6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_INIT();
    2a72:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_INIT>
	GI_voidEnable();
    2a76:	0e 94 85 0b 	call	0x170a	; 0x170a <GI_voidEnable>
	TIM0_SetCallBackoverflow(time);
    2a7a:	8e ec       	ldi	r24, 0xCE	; 206
    2a7c:	96 e1       	ldi	r25, 0x16	; 22
    2a7e:	0e 94 a5 11 	call	0x234a	; 0x234a <TIM0_SetCallBackoverflow>
	TIM0_INIT();
    2a82:	0e 94 12 11 	call	0x2224	; 0x2224 <TIM0_INIT>
	EXTI_SET_CALL_BACK(alarm_dis , 0);
    2a86:	8f ef       	ldi	r24, 0xFF	; 255
    2a88:	98 e1       	ldi	r25, 0x18	; 24
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 9b 09 	call	0x1336	; 0x1336 <EXTI_SET_CALL_BACK>
    EXTI_u8EXTEnable(EXT0, Falling_edge);
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	0e 94 c3 09 	call	0x1386	; 0x1386 <EXTI_u8EXTEnable>

	while(1){

		LCD_WRITE_STRING(" 00:00:00");
    2a98:	8e e6       	ldi	r24, 0x6E	; 110
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
	 if( num ==1){
    2aa0:	80 91 01 01 	lds	r24, 0x0101
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	49 f4       	brne	.+18     	; 0x2aba <main+0x56>
		 LCD_GO_TO(line1 , 13);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	6d e0       	ldi	r22, 0x0D	; 13
    2aac:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		    LCD_WRITE_STRING("AM");
    2ab0:	88 e7       	ldi	r24, 0x78	; 120
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
    2ab8:	0c c0       	rjmp	.+24     	; 0x2ad2 <main+0x6e>
				  }
	 else if ( num == 2){
    2aba:	80 91 01 01 	lds	r24, 0x0101
    2abe:	82 30       	cpi	r24, 0x02	; 2
    2ac0:	41 f4       	brne	.+16     	; 0x2ad2 <main+0x6e>
			  LCD_GO_TO(line1 , 13);
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	6d e0       	ldi	r22, 0x0D	; 13
    2ac6:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
			 LCD_WRITE_STRING("PM");
    2aca:	8b e7       	ldi	r24, 0x7B	; 123
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
					 	    }
        LCD_GO_TO(line2,0);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		LCD_WRITE_STRING("1-T 2-al 3-cont");
    2ada:	8e e7       	ldi	r24, 0x7E	; 126
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
      do{
			 KPD_u8KpdGetKeyState(&pinvalue);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
			  }while(pinvalue ==  Kpd_keynotpressed);
    2aea:	80 91 00 01 	lds	r24, 0x0100
    2aee:	8f 3f       	cpi	r24, 0xFF	; 255
    2af0:	c1 f3       	breq	.-16     	; 0x2ae2 <main+0x7e>
	    sign_1 = pinvalue -'0';
    2af2:	80 91 00 01 	lds	r24, 0x0100
    2af6:	80 53       	subi	r24, 0x30	; 48
    2af8:	80 93 03 01 	sts	0x0103, r24
		if(sign_1 >=0 && sign_1<=9 ){
    2afc:	80 91 03 01 	lds	r24, 0x0103
    2b00:	8a 30       	cpi	r24, 0x0A	; 10
    2b02:	a8 f4       	brcc	.+42     	; 0x2b2e <main+0xca>
			num_1 = (num_1*10) + (pinvalue -'0');
    2b04:	80 91 de 00 	lds	r24, 0x00DE
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	9c 01       	movw	r18, r24
    2b0e:	22 0f       	add	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	c9 01       	movw	r24, r18
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	82 0f       	add	r24, r18
    2b1e:	93 1f       	adc	r25, r19
    2b20:	98 2f       	mov	r25, r24
    2b22:	80 91 00 01 	lds	r24, 0x0100
    2b26:	89 0f       	add	r24, r25
    2b28:	80 53       	subi	r24, 0x30	; 48
    2b2a:	80 93 de 00 	sts	0x00DE, r24
			  }


	   switch( num_1){
    2b2e:	80 91 de 00 	lds	r24, 0x00DE
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	3a 83       	std	Y+2, r19	; 0x02
    2b38:	29 83       	std	Y+1, r18	; 0x01
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	82 30       	cpi	r24, 0x02	; 2
    2b40:	91 05       	cpc	r25, r1
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <main+0xe2>
    2b44:	5c c0       	rjmp	.+184    	; 0x2bfe <main+0x19a>
    2b46:	29 81       	ldd	r18, Y+1	; 0x01
    2b48:	3a 81       	ldd	r19, Y+2	; 0x02
    2b4a:	23 30       	cpi	r18, 0x03	; 3
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <main+0xee>
    2b50:	95 c0       	rjmp	.+298    	; 0x2c7c <main+0x218>
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	9a 81       	ldd	r25, Y+2	; 0x02
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	91 05       	cpc	r25, r1
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <main+0xfa>
    2b5c:	14 c1       	rjmp	.+552    	; 0x2d86 <main+0x322>
	   case 1:
		   num_1=0 ;
    2b5e:	10 92 de 00 	sts	0x00DE, r1
		   LCD_WRITE_COMMAND(lcd_Clear);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
		   set_time();
    2b68:	0e 94 81 12 	call	0x2502	; 0x2502 <set_time>

		   if( pinvalue!='s'){
    2b6c:	80 91 00 01 	lds	r24, 0x0100
    2b70:	83 37       	cpi	r24, 0x73	; 115
    2b72:	71 f1       	breq	.+92     	; 0x2bd0 <main+0x16c>
            LCD_GO_TO(line2 ,0);
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	60 e0       	ldi	r22, 0x00	; 0
    2b78:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		   LCD_WRITE_STRING("1-AM 2-PM") ;
    2b7c:	8e e8       	ldi	r24, 0x8E	; 142
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>

		   do{ KPD_u8KpdGetKeyState(&pinvalue);
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
		  		 }while(pinvalue ==  Kpd_keynotpressed);
    2b8c:	80 91 00 01 	lds	r24, 0x0100
    2b90:	8f 3f       	cpi	r24, 0xFF	; 255
    2b92:	c1 f3       	breq	.-16     	; 0x2b84 <main+0x120>
		  sign_1 = pinvalue -'0';
    2b94:	80 91 00 01 	lds	r24, 0x0100
    2b98:	80 53       	subi	r24, 0x30	; 48
    2b9a:	80 93 03 01 	sts	0x0103, r24
		  if(sign_1 >=0 && sign_1<=9 ){
    2b9e:	80 91 03 01 	lds	r24, 0x0103
    2ba2:	8a 30       	cpi	r24, 0x0A	; 10
    2ba4:	a8 f4       	brcc	.+42     	; 0x2bd0 <main+0x16c>
		  			num = (num*10) + (pinvalue -'0');
    2ba6:	80 91 01 01 	lds	r24, 0x0101
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	9c 01       	movw	r18, r24
    2bb0:	22 0f       	add	r18, r18
    2bb2:	33 1f       	adc	r19, r19
    2bb4:	c9 01       	movw	r24, r18
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	82 0f       	add	r24, r18
    2bc0:	93 1f       	adc	r25, r19
    2bc2:	98 2f       	mov	r25, r24
    2bc4:	80 91 00 01 	lds	r24, 0x0100
    2bc8:	89 0f       	add	r24, r25
    2bca:	80 53       	subi	r24, 0x30	; 48
    2bcc:	80 93 01 01 	sts	0x0101, r24
		  			  }

          }

		  num_1=0;
    2bd0:	10 92 de 00 	sts	0x00DE, r1
		  do{  KPD_u8KpdGetKeyState(&pinvalue);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
		  			  }while(pinvalue ==  Kpd_keynotpressed);
    2bdc:	80 91 00 01 	lds	r24, 0x0100
    2be0:	8f 3f       	cpi	r24, 0xFF	; 255
    2be2:	c1 f3       	breq	.-16     	; 0x2bd4 <main+0x170>
		  if( pinvalue=='s'){
    2be4:	80 91 00 01 	lds	r24, 0x0100
    2be8:	83 37       	cpi	r24, 0x73	; 115
    2bea:	19 f4       	brne	.+6      	; 0x2bf2 <main+0x18e>
		  set =1 ;}
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	80 93 f9 00 	sts	0x00F9, r24
         LCD_WRITE_COMMAND(lcd_Clear);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
		  num_1=0;
    2bf8:	10 92 de 00 	sts	0x00DE, r1
    2bfc:	c4 c0       	rjmp	.+392    	; 0x2d86 <main+0x322>



  break ;
  case 2:
	  LCD_WRITE_COMMAND(lcd_Clear);
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
	   num_1=0;
    2c04:	10 92 de 00 	sts	0x00DE, r1
	   if( pinvalue!='s'){
    2c08:	80 91 00 01 	lds	r24, 0x0100
    2c0c:	83 37       	cpi	r24, 0x73	; 115
    2c0e:	99 f1       	breq	.+102    	; 0x2c76 <main+0x212>
	            alarm();
    2c10:	0e 94 c7 13 	call	0x278e	; 0x278e <alarm>
	            LCD_GO_TO(line2 ,0);
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
	 		   LCD_WRITE_STRING("1-AM 2-PM") ;
    2c1c:	8e e8       	ldi	r24, 0x8E	; 142
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
	 		   do{ KPD_u8KpdGetKeyState(&pinvalue);
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	91 e0       	ldi	r25, 0x01	; 1
    2c28:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
	 		  		 }while(pinvalue ==  Kpd_keynotpressed);
    2c2c:	80 91 00 01 	lds	r24, 0x0100
    2c30:	8f 3f       	cpi	r24, 0xFF	; 255
    2c32:	c1 f3       	breq	.-16     	; 0x2c24 <main+0x1c0>
	 		  sign_1 = pinvalue -'0';
    2c34:	80 91 00 01 	lds	r24, 0x0100
    2c38:	80 53       	subi	r24, 0x30	; 48
    2c3a:	80 93 03 01 	sts	0x0103, r24
	 		  if(sign_1 >=0 && sign_1<=9 ){
    2c3e:	80 91 03 01 	lds	r24, 0x0103
    2c42:	8a 30       	cpi	r24, 0x0A	; 10
    2c44:	a8 f4       	brcc	.+42     	; 0x2c70 <main+0x20c>
	 		  			num_al = (num_al*10) + (pinvalue -'0');
    2c46:	80 91 02 01 	lds	r24, 0x0102
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9c 01       	movw	r18, r24
    2c50:	22 0f       	add	r18, r18
    2c52:	33 1f       	adc	r19, r19
    2c54:	c9 01       	movw	r24, r18
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	82 0f       	add	r24, r18
    2c60:	93 1f       	adc	r25, r19
    2c62:	98 2f       	mov	r25, r24
    2c64:	80 91 00 01 	lds	r24, 0x0100
    2c68:	89 0f       	add	r24, r25
    2c6a:	80 53       	subi	r24, 0x30	; 48
    2c6c:	80 93 02 01 	sts	0x0102, r24
	 		  			  }


	 		  LCD_WRITE_COMMAND(lcd_Clear);}
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
	 		  num_1=0;
    2c76:	10 92 de 00 	sts	0x00DE, r1
    2c7a:	85 c0       	rjmp	.+266    	; 0x2d86 <main+0x322>


		   break ;

case 3:
	LCD_WRITE_COMMAND(lcd_Clear);
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
	 LCD_GO_TO(line2 ,0);
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
     LCD_WRITE_STRING("1-stop_w 2_back") ;
    2c8a:	88 e9       	ldi	r24, 0x98	; 152
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
   num_1 =0 ;
    2c92:	10 92 de 00 	sts	0x00DE, r1
   while(1) {
     do{ KPD_u8KpdGetKeyState(&pinvalue);
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	91 e0       	ldi	r25, 0x01	; 1
    2c9a:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
    	  }while(pinvalue ==  Kpd_keynotpressed);
    2c9e:	80 91 00 01 	lds	r24, 0x0100
    2ca2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca4:	c1 f3       	breq	.-16     	; 0x2c96 <main+0x232>
    	 		  sign_1 = pinvalue -'0';
    2ca6:	80 91 00 01 	lds	r24, 0x0100
    2caa:	80 53       	subi	r24, 0x30	; 48
    2cac:	80 93 03 01 	sts	0x0103, r24
    	 		  if(sign_1 >=0 && sign_1<=9 ){
    2cb0:	80 91 03 01 	lds	r24, 0x0103
    2cb4:	8a 30       	cpi	r24, 0x0A	; 10
    2cb6:	a8 f4       	brcc	.+42     	; 0x2ce2 <main+0x27e>
    	 		  			num_1 = (num_1*10) + (pinvalue -'0');
    2cb8:	80 91 de 00 	lds	r24, 0x00DE
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	22 0f       	add	r18, r18
    2cc4:	33 1f       	adc	r19, r19
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	82 0f       	add	r24, r18
    2cd2:	93 1f       	adc	r25, r19
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	80 91 00 01 	lds	r24, 0x0100
    2cda:	89 0f       	add	r24, r25
    2cdc:	80 53       	subi	r24, 0x30	; 48
    2cde:	80 93 de 00 	sts	0x00DE, r24
    	 		  			  }
    if(num_1 ==1){
    2ce2:	80 91 de 00 	lds	r24, 0x00DE
    2ce6:	81 30       	cpi	r24, 0x01	; 1
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <main+0x288>
    2cea:	3f c0       	rjmp	.+126    	; 0x2d6a <main+0x306>
    	 	stop_watch();
    2cec:	0e 94 11 15 	call	0x2a22	; 0x2a22 <stop_watch>
    	 	 LCD_GO_TO(line2 ,10);
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	6a e0       	ldi	r22, 0x0A	; 10
    2cf4:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
             LCD_WRITE_STRING("2_back") ;
    2cf8:	88 ea       	ldi	r24, 0xA8	; 168
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
    	 	num_1=0 ;
    2d00:	10 92 de 00 	sts	0x00DE, r1

    	 while(1){
    	 	do{ KPD_u8KpdGetKeyState(&pinvalue);
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	91 e0       	ldi	r25, 0x01	; 1
    2d08:	0e 94 a1 0b 	call	0x1742	; 0x1742 <KPD_u8KpdGetKeyState>
    	 	    }while(pinvalue ==  Kpd_keynotpressed);
    2d0c:	80 91 00 01 	lds	r24, 0x0100
    2d10:	8f 3f       	cpi	r24, 0xFF	; 255
    2d12:	c1 f3       	breq	.-16     	; 0x2d04 <main+0x2a0>
    	 	   num_1=0 ;
    2d14:	10 92 de 00 	sts	0x00DE, r1
    	 	  sign_1 = pinvalue -'0';
    2d18:	80 91 00 01 	lds	r24, 0x0100
    2d1c:	80 53       	subi	r24, 0x30	; 48
    2d1e:	80 93 03 01 	sts	0x0103, r24
    	      num_1 = (num_1*10) + (pinvalue -'0');
    2d22:	80 91 de 00 	lds	r24, 0x00DE
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 01       	movw	r18, r24
    2d2c:	22 0f       	add	r18, r18
    2d2e:	33 1f       	adc	r19, r19
    2d30:	c9 01       	movw	r24, r18
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	82 0f       	add	r24, r18
    2d3c:	93 1f       	adc	r25, r19
    2d3e:	98 2f       	mov	r25, r24
    2d40:	80 91 00 01 	lds	r24, 0x0100
    2d44:	89 0f       	add	r24, r25
    2d46:	80 53       	subi	r24, 0x30	; 48
    2d48:	80 93 de 00 	sts	0x00DE, r24
    	    if(pinvalue=='g'){
    2d4c:	80 91 00 01 	lds	r24, 0x0100
    2d50:	87 36       	cpi	r24, 0x67	; 103
    2d52:	11 f4       	brne	.+4      	; 0x2d58 <main+0x2f4>
    	    	stop_flag=0;
    2d54:	10 92 fe 00 	sts	0x00FE, r1
    	    }
    	    if( num_1==2){
    2d58:	80 91 de 00 	lds	r24, 0x00DE
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	91 f6       	brne	.-92     	; 0x2d04 <main+0x2a0>
    	    	stop_flag=0;
    2d60:	10 92 fe 00 	sts	0x00FE, r1
    	    	LCD_WRITE_COMMAND(lcd_Clear);
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>

    	 }

    }

        if(num_1 ==2){
    2d6a:	80 91 de 00 	lds	r24, 0x00DE
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <main+0x310>
    2d72:	91 cf       	rjmp	.-222    	; 0x2c96 <main+0x232>
        	LCD_WRITE_COMMAND(lcd_Clear);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
        	stop_flag =0 ;
    2d7a:	10 92 fe 00 	sts	0x00FE, r1
        	num_1=0;
    2d7e:	10 92 de 00 	sts	0x00DE, r1
     break ;

        }}
   num_1=0;
    2d82:	10 92 de 00 	sts	0x00DE, r1


	   }


if(pinvalue=='g'){
    2d86:	80 91 00 01 	lds	r24, 0x0100
    2d8a:	87 36       	cpi	r24, 0x67	; 103
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <main+0x32c>
    2d8e:	84 ce       	rjmp	.-760    	; 0x2a98 <main+0x34>
	stop_flag=0;
    2d90:	10 92 fe 00 	sts	0x00FE, r1
	LCD_WRITE_COMMAND(lcd_Clear);
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <LCD_WRITE_COMMAND>
    2d9a:	7e ce       	rjmp	.-772    	; 0x2a98 <main+0x34>

00002d9c <time>:


}


void time(void){
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62

if(set==1){
    2da4:	80 91 f9 00 	lds	r24, 0x00F9
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	09 f0       	breq	.+2      	; 0x2dae <time+0x12>
    2dac:	7d c1       	rjmp	.+762    	; 0x30a8 <time+0x30c>

	if(seconds == 59 && minuts<=58){
    2dae:	80 91 eb 00 	lds	r24, 0x00EB
    2db2:	8b 33       	cpi	r24, 0x3B	; 59
    2db4:	a9 f5       	brne	.+106    	; 0x2e20 <time+0x84>
    2db6:	80 91 e9 00 	lds	r24, 0x00E9
    2dba:	8b 33       	cpi	r24, 0x3B	; 59
    2dbc:	88 f5       	brcc	.+98     	; 0x2e20 <time+0x84>
		seconds=0;
    2dbe:	10 92 eb 00 	sts	0x00EB, r1
		minuts++;
    2dc2:	80 91 e9 00 	lds	r24, 0x00E9
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	80 93 e9 00 	sts	0x00E9, r24
		if( hours == hours_Alarm && minuts== minuts_alarm && seconds ==secondsalarm && set ==1  && num==num_al){
    2dcc:	90 91 ea 00 	lds	r25, 0x00EA
    2dd0:	80 91 f7 00 	lds	r24, 0x00F7
    2dd4:	98 17       	cp	r25, r24
    2dd6:	c9 f4       	brne	.+50     	; 0x2e0a <time+0x6e>
    2dd8:	90 91 e9 00 	lds	r25, 0x00E9
    2ddc:	80 91 f6 00 	lds	r24, 0x00F6
    2de0:	98 17       	cp	r25, r24
    2de2:	99 f4       	brne	.+38     	; 0x2e0a <time+0x6e>
    2de4:	90 91 eb 00 	lds	r25, 0x00EB
    2de8:	80 91 f8 00 	lds	r24, 0x00F8
    2dec:	98 17       	cp	r25, r24
    2dee:	69 f4       	brne	.+26     	; 0x2e0a <time+0x6e>
    2df0:	80 91 f9 00 	lds	r24, 0x00F9
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	49 f4       	brne	.+18     	; 0x2e0a <time+0x6e>
    2df8:	90 91 01 01 	lds	r25, 0x0101
    2dfc:	80 91 02 01 	lds	r24, 0x0102
    2e00:	98 17       	cp	r25, r24
    2e02:	19 f4       	brne	.+6      	; 0x2e0a <time+0x6e>
	   		 	alarm_flag=1;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	80 93 fa 00 	sts	0x00FA, r24
	   			  	 }
         if( alarm_flag==1){
    2e0a:	80 91 fa 00 	lds	r24, 0x00FA
    2e0e:	81 30       	cpi	r24, 0x01	; 1
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <time+0x78>
    2e12:	a2 c0       	rjmp	.+324    	; 0x2f58 <time+0x1bc>
            DIO_u8SetPinValue(PORTA,PIN_5,LOGIC_HIGH);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	65 e0       	ldi	r22, 0x05	; 5
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
    2e1e:	9c c0       	rjmp	.+312    	; 0x2f58 <time+0x1bc>
              }
	}
	else if(seconds==59 && minuts==59 && hours<12){
    2e20:	80 91 eb 00 	lds	r24, 0x00EB
    2e24:	8b 33       	cpi	r24, 0x3B	; 59
    2e26:	d9 f5       	brne	.+118    	; 0x2e9e <time+0x102>
    2e28:	80 91 e9 00 	lds	r24, 0x00E9
    2e2c:	8b 33       	cpi	r24, 0x3B	; 59
    2e2e:	b9 f5       	brne	.+110    	; 0x2e9e <time+0x102>
    2e30:	80 91 ea 00 	lds	r24, 0x00EA
    2e34:	8c 30       	cpi	r24, 0x0C	; 12
    2e36:	98 f5       	brcc	.+102    	; 0x2e9e <time+0x102>
		minuts=0;
    2e38:	10 92 e9 00 	sts	0x00E9, r1
		seconds=0;
    2e3c:	10 92 eb 00 	sts	0x00EB, r1
		hours++;
    2e40:	80 91 ea 00 	lds	r24, 0x00EA
    2e44:	8f 5f       	subi	r24, 0xFF	; 255
    2e46:	80 93 ea 00 	sts	0x00EA, r24
		if( hours == hours_Alarm && minuts== minuts_alarm && seconds ==secondsalarm && set ==1 && num==num_al){
    2e4a:	90 91 ea 00 	lds	r25, 0x00EA
    2e4e:	80 91 f7 00 	lds	r24, 0x00F7
    2e52:	98 17       	cp	r25, r24
    2e54:	c9 f4       	brne	.+50     	; 0x2e88 <time+0xec>
    2e56:	90 91 e9 00 	lds	r25, 0x00E9
    2e5a:	80 91 f6 00 	lds	r24, 0x00F6
    2e5e:	98 17       	cp	r25, r24
    2e60:	99 f4       	brne	.+38     	; 0x2e88 <time+0xec>
    2e62:	90 91 eb 00 	lds	r25, 0x00EB
    2e66:	80 91 f8 00 	lds	r24, 0x00F8
    2e6a:	98 17       	cp	r25, r24
    2e6c:	69 f4       	brne	.+26     	; 0x2e88 <time+0xec>
    2e6e:	80 91 f9 00 	lds	r24, 0x00F9
    2e72:	81 30       	cpi	r24, 0x01	; 1
    2e74:	49 f4       	brne	.+18     	; 0x2e88 <time+0xec>
    2e76:	90 91 01 01 	lds	r25, 0x0101
    2e7a:	80 91 02 01 	lds	r24, 0x0102
    2e7e:	98 17       	cp	r25, r24
    2e80:	19 f4       	brne	.+6      	; 0x2e88 <time+0xec>
	   			  	 	alarm_flag=1;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 fa 00 	sts	0x00FA, r24
	   			  	 }

	   			  	 if( alarm_flag==1){
    2e88:	80 91 fa 00 	lds	r24, 0x00FA
    2e8c:	81 30       	cpi	r24, 0x01	; 1
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <time+0xf6>
    2e90:	63 c0       	rjmp	.+198    	; 0x2f58 <time+0x1bc>

	   			  	 	DIO_u8SetPinValue(PORTA,PIN_5,LOGIC_HIGH);
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	65 e0       	ldi	r22, 0x05	; 5
    2e96:	41 e0       	ldi	r20, 0x01	; 1
    2e98:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
    2e9c:	5d c0       	rjmp	.+186    	; 0x2f58 <time+0x1bc>

	   			  	 }
	}
	else if(hours==12 && seconds==59 && minuts ==59 ){
    2e9e:	80 91 ea 00 	lds	r24, 0x00EA
    2ea2:	8c 30       	cpi	r24, 0x0C	; 12
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <time+0x10c>
    2ea6:	58 c0       	rjmp	.+176    	; 0x2f58 <time+0x1bc>
    2ea8:	80 91 eb 00 	lds	r24, 0x00EB
    2eac:	8b 33       	cpi	r24, 0x3B	; 59
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <time+0x116>
    2eb0:	53 c0       	rjmp	.+166    	; 0x2f58 <time+0x1bc>
    2eb2:	80 91 e9 00 	lds	r24, 0x00E9
    2eb6:	8b 33       	cpi	r24, 0x3B	; 59
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <time+0x120>
    2eba:	4e c0       	rjmp	.+156    	; 0x2f58 <time+0x1bc>
				 		hours=1 ;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	80 93 ea 00 	sts	0x00EA, r24
				 		minuts=0;
    2ec2:	10 92 e9 00 	sts	0x00E9, r1
				 	    seconds=0;
    2ec6:	10 92 eb 00 	sts	0x00EB, r1
				 	    if( num ==1){
    2eca:	80 91 01 01 	lds	r24, 0x0101
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	61 f4       	brne	.+24     	; 0x2eea <time+0x14e>
				 	    	num =2;
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	80 93 01 01 	sts	0x0101, r24
					 	   	 LCD_GO_TO(line1 , 13);
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	6d e0       	ldi	r22, 0x0D	; 13
    2edc:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
					 	   	  LCD_WRITE_STRING("PM");
    2ee0:	8b e7       	ldi	r24, 0x7B	; 123
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <time+0x16c>
				 	    }
				 	    else if ( num == 2){
    2eea:	80 91 01 01 	lds	r24, 0x0101
    2eee:	82 30       	cpi	r24, 0x02	; 2
    2ef0:	59 f4       	brne	.+22     	; 0x2f08 <time+0x16c>
				 	    	num =1 ;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	80 93 01 01 	sts	0x0101, r24
				 	    	 LCD_GO_TO(line1 , 13);
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	6d e0       	ldi	r22, 0x0D	; 13
    2efc:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
				 	    	 LCD_WRITE_STRING("AM");
    2f00:	88 e7       	ldi	r24, 0x78	; 120
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <LCD_WRITE_STRING>
				 	    }

				 		if( hours == hours_Alarm && minuts== minuts_alarm && seconds ==secondsalarm && set ==1 && num==num_al){
    2f08:	90 91 ea 00 	lds	r25, 0x00EA
    2f0c:	80 91 f7 00 	lds	r24, 0x00F7
    2f10:	98 17       	cp	r25, r24
    2f12:	c9 f4       	brne	.+50     	; 0x2f46 <time+0x1aa>
    2f14:	90 91 e9 00 	lds	r25, 0x00E9
    2f18:	80 91 f6 00 	lds	r24, 0x00F6
    2f1c:	98 17       	cp	r25, r24
    2f1e:	99 f4       	brne	.+38     	; 0x2f46 <time+0x1aa>
    2f20:	90 91 eb 00 	lds	r25, 0x00EB
    2f24:	80 91 f8 00 	lds	r24, 0x00F8
    2f28:	98 17       	cp	r25, r24
    2f2a:	69 f4       	brne	.+26     	; 0x2f46 <time+0x1aa>
    2f2c:	80 91 f9 00 	lds	r24, 0x00F9
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	49 f4       	brne	.+18     	; 0x2f46 <time+0x1aa>
    2f34:	90 91 01 01 	lds	r25, 0x0101
    2f38:	80 91 02 01 	lds	r24, 0x0102
    2f3c:	98 17       	cp	r25, r24
    2f3e:	19 f4       	brne	.+6      	; 0x2f46 <time+0x1aa>
				 	   			  	 	alarm_flag=1;
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	80 93 fa 00 	sts	0x00FA, r24
				 	   			  	 }

				 	   			  	 if( alarm_flag==1){
    2f46:	80 91 fa 00 	lds	r24, 0x00FA
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	29 f4       	brne	.+10     	; 0x2f58 <time+0x1bc>

				 	   			  	 	DIO_u8SetPinValue(PORTA,PIN_5,LOGIC_HIGH);
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	65 e0       	ldi	r22, 0x05	; 5
    2f52:	41 e0       	ldi	r20, 0x01	; 1
    2f54:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
				 	   			  	 }

	}


 if( seconds <59){
    2f58:	80 91 eb 00 	lds	r24, 0x00EB
    2f5c:	8b 33       	cpi	r24, 0x3B	; 59
    2f5e:	78 f5       	brcc	.+94     	; 0x2fbe <time+0x222>
		seconds++ ;
    2f60:	80 91 eb 00 	lds	r24, 0x00EB
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	80 93 eb 00 	sts	0x00EB, r24
		if( hours == hours_Alarm && minuts== minuts_alarm && seconds ==secondsalarm && set ==1 && num==num_al){
    2f6a:	90 91 ea 00 	lds	r25, 0x00EA
    2f6e:	80 91 f7 00 	lds	r24, 0x00F7
    2f72:	98 17       	cp	r25, r24
    2f74:	c9 f4       	brne	.+50     	; 0x2fa8 <time+0x20c>
    2f76:	90 91 e9 00 	lds	r25, 0x00E9
    2f7a:	80 91 f6 00 	lds	r24, 0x00F6
    2f7e:	98 17       	cp	r25, r24
    2f80:	99 f4       	brne	.+38     	; 0x2fa8 <time+0x20c>
    2f82:	90 91 eb 00 	lds	r25, 0x00EB
    2f86:	80 91 f8 00 	lds	r24, 0x00F8
    2f8a:	98 17       	cp	r25, r24
    2f8c:	69 f4       	brne	.+26     	; 0x2fa8 <time+0x20c>
    2f8e:	80 91 f9 00 	lds	r24, 0x00F9
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	49 f4       	brne	.+18     	; 0x2fa8 <time+0x20c>
    2f96:	90 91 01 01 	lds	r25, 0x0101
    2f9a:	80 91 02 01 	lds	r24, 0x0102
    2f9e:	98 17       	cp	r25, r24
    2fa0:	19 f4       	brne	.+6      	; 0x2fa8 <time+0x20c>
	   			  	 	alarm_flag=1;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	80 93 fa 00 	sts	0x00FA, r24
	   			  	 }

	   			  	 if( alarm_flag==1){
    2fa8:	80 91 fa 00 	lds	r24, 0x00FA
    2fac:	81 30       	cpi	r24, 0x01	; 1
    2fae:	39 f4       	brne	.+14     	; 0x2fbe <time+0x222>
	   			  	alarm_flag =0 ;
    2fb0:	10 92 fa 00 	sts	0x00FA, r1
	   			  	 	DIO_u8SetPinValue(PORTA,PIN_5,LOGIC_HIGH);
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	65 e0       	ldi	r22, 0x05	; 5
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>

	   			  	 }
	}
      LCD_GO_TO(line1 , 1);
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	61 e0       	ldi	r22, 0x01	; 1
    2fc2:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   	  Lcd_voidDisplayNumber(hours/10);
    2fc6:	80 91 ea 00 	lds	r24, 0x00EA
    2fca:	9a e0       	ldi	r25, 0x0A	; 10
    2fcc:	69 2f       	mov	r22, r25
    2fce:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    2fd2:	88 2f       	mov	r24, r24
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	a0 e0       	ldi	r26, 0x00	; 0
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
   	  LCD_GO_TO(line1 , 2);
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	62 e0       	ldi	r22, 0x02	; 2
    2fe6:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   	  Lcd_voidDisplayNumber(hours%10);
    2fea:	80 91 ea 00 	lds	r24, 0x00EA
    2fee:	9a e0       	ldi	r25, 0x0A	; 10
    2ff0:	69 2f       	mov	r22, r25
    2ff2:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    2ff6:	89 2f       	mov	r24, r25
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	a0 e0       	ldi	r26, 0x00	; 0
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
   	  LCD_WRITE_Char(':');
    3008:	8a e3       	ldi	r24, 0x3A	; 58
    300a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
   	  LCD_GO_TO(line1 , 4);
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	64 e0       	ldi	r22, 0x04	; 4
    3012:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   	  Lcd_voidDisplayNumber(minuts/10);
    3016:	80 91 e9 00 	lds	r24, 0x00E9
    301a:	9a e0       	ldi	r25, 0x0A	; 10
    301c:	69 2f       	mov	r22, r25
    301e:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
   	  LCD_GO_TO(line1 , 5);
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	65 e0       	ldi	r22, 0x05	; 5
    3036:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   	  Lcd_voidDisplayNumber(minuts%10);
    303a:	80 91 e9 00 	lds	r24, 0x00E9
    303e:	9a e0       	ldi	r25, 0x0A	; 10
    3040:	69 2f       	mov	r22, r25
    3042:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3046:	89 2f       	mov	r24, r25
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	a0 e0       	ldi	r26, 0x00	; 0
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
   	  LCD_WRITE_Char(':');
    3058:	8a e3       	ldi	r24, 0x3A	; 58
    305a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
   	  LCD_GO_TO(line1 , 7);
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	67 e0       	ldi	r22, 0x07	; 7
    3062:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   	  Lcd_voidDisplayNumber(seconds/10);
    3066:	80 91 eb 00 	lds	r24, 0x00EB
    306a:	9a e0       	ldi	r25, 0x0A	; 10
    306c:	69 2f       	mov	r22, r25
    306e:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	a0 e0       	ldi	r26, 0x00	; 0
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	bc 01       	movw	r22, r24
    307c:	cd 01       	movw	r24, r26
    307e:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
   	  LCD_GO_TO(line1 , 8);
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	68 e0       	ldi	r22, 0x08	; 8
    3086:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
   	  Lcd_voidDisplayNumber(seconds%10);
    308a:	80 91 eb 00 	lds	r24, 0x00EB
    308e:	9a e0       	ldi	r25, 0x0A	; 10
    3090:	69 2f       	mov	r22, r25
    3092:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3096:	89 2f       	mov	r24, r25
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>


 }

if(stop_flag==1){
    30a8:	80 91 fe 00 	lds	r24, 0x00FE
    30ac:	81 30       	cpi	r24, 0x01	; 1
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <time+0x316>
    30b0:	a3 c0       	rjmp	.+326    	; 0x31f8 <time+0x45c>

	LCD_GO_TO(line2 , 0);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
	if(secondst==59 &&  minuts_st<=58){
    30ba:	80 91 fd 00 	lds	r24, 0x00FD
    30be:	8b 33       	cpi	r24, 0x3B	; 59
    30c0:	61 f4       	brne	.+24     	; 0x30da <time+0x33e>
    30c2:	80 91 fb 00 	lds	r24, 0x00FB
    30c6:	8b 33       	cpi	r24, 0x3B	; 59
    30c8:	40 f4       	brcc	.+16     	; 0x30da <time+0x33e>
		secondst=0;
    30ca:	10 92 fd 00 	sts	0x00FD, r1
		minuts_st++;
    30ce:	80 91 fb 00 	lds	r24, 0x00FB
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	80 93 fb 00 	sts	0x00FB, r24
    30d8:	11 c0       	rjmp	.+34     	; 0x30fc <time+0x360>

	}
	else if(secondst==59 && minuts_st==59 ){
    30da:	80 91 fd 00 	lds	r24, 0x00FD
    30de:	8b 33       	cpi	r24, 0x3B	; 59
    30e0:	69 f4       	brne	.+26     	; 0x30fc <time+0x360>
    30e2:	80 91 fb 00 	lds	r24, 0x00FB
    30e6:	8b 33       	cpi	r24, 0x3B	; 59
    30e8:	49 f4       	brne	.+18     	; 0x30fc <time+0x360>
		    minuts_st=0;
    30ea:	10 92 fb 00 	sts	0x00FB, r1
			secondst=0;
    30ee:	10 92 fd 00 	sts	0x00FD, r1
			hours_st++;
    30f2:	80 91 fc 00 	lds	r24, 0x00FC
    30f6:	8f 5f       	subi	r24, 0xFF	; 255
    30f8:	80 93 fc 00 	sts	0x00FC, r24
 }
	 if( secondst <59){
    30fc:	80 91 fd 00 	lds	r24, 0x00FD
    3100:	8b 33       	cpi	r24, 0x3B	; 59
    3102:	28 f4       	brcc	.+10     	; 0x310e <time+0x372>
		 secondst++ ;
    3104:	80 91 fd 00 	lds	r24, 0x00FD
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	80 93 fd 00 	sts	0x00FD, r24
 }

	           LCD_GO_TO(line2 , 1);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	61 e0       	ldi	r22, 0x01	; 1
    3112:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
              Lcd_voidDisplayNumber(hours_st/10);
    3116:	80 91 fc 00 	lds	r24, 0x00FC
    311a:	9a e0       	ldi	r25, 0x0A	; 10
    311c:	69 2f       	mov	r22, r25
    311e:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a0 e0       	ldi	r26, 0x00	; 0
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
              LCD_GO_TO(line2 , 2);
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	62 e0       	ldi	r22, 0x02	; 2
    3136:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		   	  Lcd_voidDisplayNumber(hours_st%10);
    313a:	80 91 fc 00 	lds	r24, 0x00FC
    313e:	9a e0       	ldi	r25, 0x0A	; 10
    3140:	69 2f       	mov	r22, r25
    3142:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3146:	89 2f       	mov	r24, r25
    3148:	88 2f       	mov	r24, r24
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	a0 e0       	ldi	r26, 0x00	; 0
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
		   	  LCD_WRITE_Char(':');
    3158:	8a e3       	ldi	r24, 0x3A	; 58
    315a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
		   	  LCD_GO_TO(line2 , 4);
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	64 e0       	ldi	r22, 0x04	; 4
    3162:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		   	  Lcd_voidDisplayNumber(minuts_st/10);
    3166:	80 91 fb 00 	lds	r24, 0x00FB
    316a:	9a e0       	ldi	r25, 0x0A	; 10
    316c:	69 2f       	mov	r22, r25
    316e:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	a0 e0       	ldi	r26, 0x00	; 0
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	bc 01       	movw	r22, r24
    317c:	cd 01       	movw	r24, r26
    317e:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
		   	  LCD_GO_TO(line2 , 5);
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	65 e0       	ldi	r22, 0x05	; 5
    3186:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		   	  Lcd_voidDisplayNumber(minuts_st%10);
    318a:	80 91 fb 00 	lds	r24, 0x00FB
    318e:	9a e0       	ldi	r25, 0x0A	; 10
    3190:	69 2f       	mov	r22, r25
    3192:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    3196:	89 2f       	mov	r24, r25
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 e0       	ldi	r26, 0x00	; 0
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
		   	  LCD_WRITE_Char(':');
    31a8:	8a e3       	ldi	r24, 0x3A	; 58
    31aa:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <LCD_WRITE_Char>
		   	  LCD_GO_TO(line2 , 7);
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	67 e0       	ldi	r22, 0x07	; 7
    31b2:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		   	  Lcd_voidDisplayNumber(secondst/10);
    31b6:	80 91 fd 00 	lds	r24, 0x00FD
    31ba:	9a e0       	ldi	r25, 0x0A	; 10
    31bc:	69 2f       	mov	r22, r25
    31be:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    31c2:	88 2f       	mov	r24, r24
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 e0       	ldi	r26, 0x00	; 0
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	bc 01       	movw	r22, r24
    31cc:	cd 01       	movw	r24, r26
    31ce:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>
		   	  LCD_GO_TO(line2 , 8);
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	68 e0       	ldi	r22, 0x08	; 8
    31d6:	0e 94 99 10 	call	0x2132	; 0x2132 <LCD_GO_TO>
		   	  Lcd_voidDisplayNumber(secondst%10);
    31da:	80 91 fd 00 	lds	r24, 0x00FD
    31de:	9a e0       	ldi	r25, 0x0A	; 10
    31e0:	69 2f       	mov	r22, r25
    31e2:	0e 94 16 19 	call	0x322c	; 0x322c <__udivmodqi4>
    31e6:	89 2f       	mov	r24, r25
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e0       	ldi	r26, 0x00	; 0
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_voidDisplayNumber>

}



}
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	08 95       	ret

000031fe <alarm_dis>:

void alarm_dis(void){
    31fe:	df 93       	push	r29
    3200:	cf 93       	push	r28
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62


  DIO_u8GetPinValue(PORTA , PIN_0 , &read);
    3206:	2f ef       	ldi	r18, 0xFF	; 255
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	a9 01       	movw	r20, r18
    3210:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8GetPinValue>
	if(read ==0){
    3214:	80 91 ff 00 	lds	r24, 0x00FF
    3218:	88 23       	and	r24, r24
    321a:	29 f4       	brne	.+10     	; 0x3226 <alarm_dis+0x28>

		DIO_u8SetPinValue(PORTA,PIN_5,LOGIC_LOW);
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	65 e0       	ldi	r22, 0x05	; 5
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	0e 94 d0 06 	call	0xda0	; 0xda0 <DIO_u8SetPinValue>
	}



}
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	08 95       	ret

0000322c <__udivmodqi4>:
    322c:	99 1b       	sub	r25, r25
    322e:	79 e0       	ldi	r23, 0x09	; 9
    3230:	04 c0       	rjmp	.+8      	; 0x323a <__udivmodqi4_ep>

00003232 <__udivmodqi4_loop>:
    3232:	99 1f       	adc	r25, r25
    3234:	96 17       	cp	r25, r22
    3236:	08 f0       	brcs	.+2      	; 0x323a <__udivmodqi4_ep>
    3238:	96 1b       	sub	r25, r22

0000323a <__udivmodqi4_ep>:
    323a:	88 1f       	adc	r24, r24
    323c:	7a 95       	dec	r23
    323e:	c9 f7       	brne	.-14     	; 0x3232 <__udivmodqi4_loop>
    3240:	80 95       	com	r24
    3242:	08 95       	ret

00003244 <__divmodsi4>:
    3244:	97 fb       	bst	r25, 7
    3246:	09 2e       	mov	r0, r25
    3248:	05 26       	eor	r0, r21
    324a:	0e d0       	rcall	.+28     	; 0x3268 <__divmodsi4_neg1>
    324c:	57 fd       	sbrc	r21, 7
    324e:	04 d0       	rcall	.+8      	; 0x3258 <__divmodsi4_neg2>
    3250:	14 d0       	rcall	.+40     	; 0x327a <__udivmodsi4>
    3252:	0a d0       	rcall	.+20     	; 0x3268 <__divmodsi4_neg1>
    3254:	00 1c       	adc	r0, r0
    3256:	38 f4       	brcc	.+14     	; 0x3266 <__divmodsi4_exit>

00003258 <__divmodsi4_neg2>:
    3258:	50 95       	com	r21
    325a:	40 95       	com	r20
    325c:	30 95       	com	r19
    325e:	21 95       	neg	r18
    3260:	3f 4f       	sbci	r19, 0xFF	; 255
    3262:	4f 4f       	sbci	r20, 0xFF	; 255
    3264:	5f 4f       	sbci	r21, 0xFF	; 255

00003266 <__divmodsi4_exit>:
    3266:	08 95       	ret

00003268 <__divmodsi4_neg1>:
    3268:	f6 f7       	brtc	.-4      	; 0x3266 <__divmodsi4_exit>
    326a:	90 95       	com	r25
    326c:	80 95       	com	r24
    326e:	70 95       	com	r23
    3270:	61 95       	neg	r22
    3272:	7f 4f       	sbci	r23, 0xFF	; 255
    3274:	8f 4f       	sbci	r24, 0xFF	; 255
    3276:	9f 4f       	sbci	r25, 0xFF	; 255
    3278:	08 95       	ret

0000327a <__udivmodsi4>:
    327a:	a1 e2       	ldi	r26, 0x21	; 33
    327c:	1a 2e       	mov	r1, r26
    327e:	aa 1b       	sub	r26, r26
    3280:	bb 1b       	sub	r27, r27
    3282:	fd 01       	movw	r30, r26
    3284:	0d c0       	rjmp	.+26     	; 0x32a0 <__udivmodsi4_ep>

00003286 <__udivmodsi4_loop>:
    3286:	aa 1f       	adc	r26, r26
    3288:	bb 1f       	adc	r27, r27
    328a:	ee 1f       	adc	r30, r30
    328c:	ff 1f       	adc	r31, r31
    328e:	a2 17       	cp	r26, r18
    3290:	b3 07       	cpc	r27, r19
    3292:	e4 07       	cpc	r30, r20
    3294:	f5 07       	cpc	r31, r21
    3296:	20 f0       	brcs	.+8      	; 0x32a0 <__udivmodsi4_ep>
    3298:	a2 1b       	sub	r26, r18
    329a:	b3 0b       	sbc	r27, r19
    329c:	e4 0b       	sbc	r30, r20
    329e:	f5 0b       	sbc	r31, r21

000032a0 <__udivmodsi4_ep>:
    32a0:	66 1f       	adc	r22, r22
    32a2:	77 1f       	adc	r23, r23
    32a4:	88 1f       	adc	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	1a 94       	dec	r1
    32aa:	69 f7       	brne	.-38     	; 0x3286 <__udivmodsi4_loop>
    32ac:	60 95       	com	r22
    32ae:	70 95       	com	r23
    32b0:	80 95       	com	r24
    32b2:	90 95       	com	r25
    32b4:	9b 01       	movw	r18, r22
    32b6:	ac 01       	movw	r20, r24
    32b8:	bd 01       	movw	r22, r26
    32ba:	cf 01       	movw	r24, r30
    32bc:	08 95       	ret

000032be <__prologue_saves__>:
    32be:	2f 92       	push	r2
    32c0:	3f 92       	push	r3
    32c2:	4f 92       	push	r4
    32c4:	5f 92       	push	r5
    32c6:	6f 92       	push	r6
    32c8:	7f 92       	push	r7
    32ca:	8f 92       	push	r8
    32cc:	9f 92       	push	r9
    32ce:	af 92       	push	r10
    32d0:	bf 92       	push	r11
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	ca 1b       	sub	r28, r26
    32e8:	db 0b       	sbc	r29, r27
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	09 94       	ijmp

000032f6 <__epilogue_restores__>:
    32f6:	2a 88       	ldd	r2, Y+18	; 0x12
    32f8:	39 88       	ldd	r3, Y+17	; 0x11
    32fa:	48 88       	ldd	r4, Y+16	; 0x10
    32fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3300:	7d 84       	ldd	r7, Y+13	; 0x0d
    3302:	8c 84       	ldd	r8, Y+12	; 0x0c
    3304:	9b 84       	ldd	r9, Y+11	; 0x0b
    3306:	aa 84       	ldd	r10, Y+10	; 0x0a
    3308:	b9 84       	ldd	r11, Y+9	; 0x09
    330a:	c8 84       	ldd	r12, Y+8	; 0x08
    330c:	df 80       	ldd	r13, Y+7	; 0x07
    330e:	ee 80       	ldd	r14, Y+6	; 0x06
    3310:	fd 80       	ldd	r15, Y+5	; 0x05
    3312:	0c 81       	ldd	r16, Y+4	; 0x04
    3314:	1b 81       	ldd	r17, Y+3	; 0x03
    3316:	aa 81       	ldd	r26, Y+2	; 0x02
    3318:	b9 81       	ldd	r27, Y+1	; 0x01
    331a:	ce 0f       	add	r28, r30
    331c:	d1 1d       	adc	r29, r1
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	ed 01       	movw	r28, r26
    332a:	08 95       	ret

0000332c <_exit>:
    332c:	f8 94       	cli

0000332e <__stop_program>:
    332e:	ff cf       	rjmp	.-2      	; 0x332e <__stop_program>
